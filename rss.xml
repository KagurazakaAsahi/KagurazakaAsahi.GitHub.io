<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>KA&#39;s Blog</title>
        <subtitle>等待,并心怀希望吧</subtitle>
        <icon>https://kagurazakaasahi.github.io/images/favicon.ico</icon>
        <link>https://kagurazakaasahi.github.io</link>
        <author>
          <name>KagurazakaAsahi</name>
        </author>
        <description>欢迎来到咖酱的Blog~~🌸</description>
        <language>zh-CN</language>
        <pubDate>Thu, 12 Dec 2024 05:47:58 +0000</pubDate>
        <lastBuildDate>Thu, 12 Dec 2024 05:47:58 +0000</lastBuildDate>
        <category term="blog" />
        <category term="ACG" />
        <category term="CS" />
        <category term="博客" />
        <category term="技术" />
        <category term="二次元" />
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%8D%95%E7%89%87%E6%9C%BA/</guid>
            <title>单片机</title>
            <link>https://kagurazakaasahi.github.io/%E5%8D%95%E7%89%87%E6%9C%BA/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <pubDate>Thu, 12 Dec 2024 05:47:58 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1&#34;&gt;#&lt;/a&gt; 1&lt;/h2&gt;
&lt;p&gt;求 1+2+3+…+99 的 BCD 和，存入 RAM 高 128B 区域&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;ORG 0000H
LJMP START

ORG 0100H
START:
    MOV R2, #01H          ; 初始化计数器R2为1
    MOV R3, #99H          ; 循环99次
    MOV A, #00H           ; 初始化累加器A为0
    MOV B, #00H           ; 初始化寄存器B为0，用于进位

LOOP:
    ADD A, R2             ; 将R2中的值加到累加器A中
    INC R2                ; 计数器R2加1
    DJNZ R3, LOOP         ; 减1非0转移进行循环

    ; 现在A中包含1到99的和
    MOV B, A              ; 将累加结果存入B
    MOV A, #00H           ; 清空累加器A

    ; 转换为BCD码
    MOV A, B              ; 将累加结果存入A
    DA A                  ; BCD码调整
    MOV R4, A             ; 将调整后的BCD码存入R4

    ; 存储结果到RAM高128B区域
    MOV R0, #80H          ; 设置RAM地址
    MOV A, R4
    MOV @R0, A            ; 存储结果

    SJMP $                ; 无限循环，终止程序

END
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2&#34;&gt;#&lt;/a&gt; 2&lt;/h2&gt;
&lt;p&gt;使用外部中断 0 和外部中断 1，在动态数码管上显示中断 0 次数，中断 1 用作次数清 0。数码管采用 74HC595 驱动。中断次数显示形式自定（3 位十进制或 2 位 16 进制）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;ORG  0000H		
	   LJMP	Main
	   ORG 	0003H	        ; 外部中断0向量地址
	   LJMP	INT0_ISR    
	  ORG 	0033H	        ; 外部中断1向量地址
	   LJMP	INT1_ISR  
	   ORG	 0100H	
Main:  SETB  EX0           ; 外部中断0允许
       SETB  IT0           ; 外部中断0下降沿触发
       SETB  EX1           ; 外部中断1允许
       SETB  IT1           ; 外部中断1下降沿触发
Loop:   DispScan;
       SJMP  Loop
       
       INT0_ISR:
       INC   CNT          ; CNT加1
       RETI               ; 返回主程序
       INT1_ISR:
       MOV CNT, #0         ; CNT清零
       RETI               ; 返回主程序
DispScan: MOV	A, CNT
	              MOV	B, #10
	              DIV  	AB
	              MOV	R5, A    ;R5存百位
	              MOV	A, #10
	              XCH          A, B
	              DIV  	AB
	              MOV	R6, A    ; R6存十位 
	             MOV	R7, B    ; R7存个位
            MOV  P1，#0FEH        ;选中最右边数码管
	        MOV	DPTR, #T_Disp ; 7段码表头
	        MOV	A, R7                  ; 待显示的个位数
             MOVC	A, @A+DPTR
             MOV   P0， A
             MOV  P1，#0FDH        ;选中最右边第2数码管
	       MOV	A, R6                  ; 待显示的十位数
             MOVC	A, @A+DPTR
             MOV   P0， A
             MOV   P1，#0FBH        ;选中最右边第3数码管
	       MOV	A, R5                  ; 待显示的百位数
             MOVC	A, @A+DPTR
             MOV   P0， A
T_Disp: DB 3FH,06H,5BH,4FH,66H,6DH, 7DH,07H
              DB  7FH,6FH,77H,7CH,39H,5EH,79H,71H; 0-F的7段码 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3&#34;&gt;#&lt;/a&gt; 3&lt;/h2&gt;
&lt;p&gt;定时器 0/1 做 16 位自动重装，使 P1.7 输出周期为 1 秒或 2 秒的矩形波，占空比自定。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;ORG 0000H
LJMP MAIN

; 定义单片机寄存器
P1      EQU     90H
TMOD    EQU     89H
TH0     EQU     8CH
TL0     EQU     8AH
TCON    EQU     88H

; 定义常量
TIMER0_MODE EQU 00000001B ; 定时器0模式1（16位定时器）
TIMER0_START EQU 00000001B ; 启动定时器0
TIMER0_STOP  EQU 00000000B ; 停止定时器0

; 初始化定时器0
INIT_TIMER0:
    MOV TMOD, TIMER0_MODE ; 设置定时器0为模式1
    MOV TH0, #0FCH        ; 高8位初值
    MOV TL0, #18H         ; 低8位初值
    SETB TR0              ; 启动定时器0
    RET

; 定时器0中断服务程序
TIMER0_ISR:
    CLR TR0               ; 停止定时器0
    CPL P1.7              ; 翻转P1.7引脚状态
    MOV TH0, #0FCH        ; 重新加载高8位初值
    MOV TL0, #18H         ; 重新加载低8位初值
    SETB TR0              ; 重新启动定时器0
    RETI

; 主程序
MAIN:
    MOV P1, #00H          ; 初始化P1口
    CALL INIT_TIMER0      ; 初始化定时器0
    SETB EA               ; 开启全局中断
    SETB ET0              ; 开启定时器0中断
    SJMP $                ; 无限循环

END
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/</guid>
            <title>使用CDN加速博客访问</title>
            <link>https://kagurazakaasahi.github.io/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <pubDate>Mon, 02 Sep 2024 04:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;由于众所周知的原因，国内访问 &lt;code&gt;Github pages&lt;/code&gt;  较慢，十分影响博客访问体验&lt;/p&gt;
&lt;p&gt;不过好在 &lt;code&gt;CDN&lt;/code&gt;  技术可以很好的缓解这个问题&lt;/p&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;什么是CDN&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;CDN，全称为内容分发网络（Content Delivery Network），是一种通过在全球各地部署的服务器来缓存和分发内容的技术。其主要目的是加速用户访问速度、提高网站可用性和降低带宽成本。以下是 CDN 的主要功能和优势：&lt;/p&gt;
&lt;p&gt;主要功能&lt;br /&gt;
内容缓存：&lt;br /&gt;
CDN 会将网站的静态资源（如图片、视频、CSS、JavaScript 文件等）缓存到离用户最近的服务器上。当用户请求这些资源时，可以从最近的服务器获取，而不需要每次都从源服务器获取。&lt;br /&gt;
负载均衡：&lt;br /&gt;
通过智能调度和负载均衡，CDN 可以将用户请求分配到不同的服务器上，避免单个服务器过载，提高整体性能。&lt;br /&gt;
内容分发：&lt;br /&gt;
CDN 通过分布在全球的多个节点，将内容分发到离用户最近的服务器上，减少网络延迟，提高访问速度。&lt;br /&gt;
优势&lt;br /&gt;
提高访问速度：&lt;br /&gt;
由于内容被缓存到离用户最近的服务器上，用户可以更快地获取所需资源，减少页面加载时间。&lt;br /&gt;
降低带宽成本：&lt;br /&gt;
通过缓存和优化，CDN 可以减少源服务器的带宽消耗，从而降低网站的托管成本。&lt;br /&gt;
提高可用性和稳定性：&lt;br /&gt;
CDN 可以处理更多的 Web 流量，减少源服务器的负载。如果某个节点出现故障，其他节点可以继续提供服务，确保网站的高可用性。&lt;br /&gt;
增强安全性：&lt;br /&gt;
CDN 可以帮助抵御分布式拒绝服务（DDoS）攻击，通过分散流量减少对源服务器的影响。&lt;br /&gt;
示例&lt;br /&gt;
假设你在北京访问一个美国的网站，如果没有 CDN，数据需要从美国的服务器传输到北京，可能会有较大的延迟。而使用 CDN 后，数据可以从北京的 CDN 节点获取，大大减少了传输时间，提高了访问速度。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;那么如何使用 CDN 加速网站呢&lt;/p&gt;
&lt;h2 id=&#34;使用cloudflare&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用cloudflare&#34;&gt;#&lt;/a&gt; 使用 Cloudflare&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902122055522.png&#34; class=&#34;&#34; title=&#34;image-20240902122055522&#34;&gt;&lt;/p&gt;
&lt;p&gt;注册登录 &lt;code&gt;Cloudflare&lt;/code&gt; , 找到 &lt;code&gt;Website&lt;/code&gt; , 添加你的网站域名，比如我的就是 &lt;code&gt;kablog.top&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902122216099.png&#34; class=&#34;&#34; title=&#34;image-20240902122216099&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902122410445.png&#34; class=&#34;&#34; title=&#34;image-20240902122410445&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后选 &lt;code&gt;free&lt;/code&gt;  即可，白嫖党大胜利！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902122527680.png&#34; class=&#34;&#34; title=&#34;image-20240902122527680&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后添加记录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902122640946.png&#34; class=&#34;&#34; title=&#34;image-20240902122640946&#34;&gt;&lt;/p&gt;
&lt;p&gt;参数类似上述，将 &lt;code&gt;Name&lt;/code&gt;  的 &lt;code&gt;kablog.top&lt;/code&gt;  改为你的域名即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
2606:50c0:8000::153
2606:50c0:8001::153
2606:50c0:8002::153
2606:50c0:8003::153
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.qinyu.space/image/image-20231204230559749.png&#34; alt=&#34;image-20231204230559749&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后即可获得上述的 DNS 服务器&lt;/p&gt;
&lt;h2 id=&#34;修改域名dns服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改域名dns服务器&#34;&gt;#&lt;/a&gt; 修改域名 DNS 服务器&lt;/h2&gt;
&lt;p&gt;找到你的域名供应商，我这里以阿里云为例&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902123244771.png&#34; class=&#34;&#34; title=&#34;image-20240902123244771&#34;&gt;&lt;/p&gt;
&lt;p&gt;域名列表 -&amp;gt; 管理&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902123340147.png&#34; class=&#34;&#34; title=&#34;image-20240902123340147&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改你的 DNS 服务器为上述&lt;/p&gt;
&lt;p&gt;等待几小时同步后就完成了&lt;/p&gt;
&lt;h2 id=&#34;问题解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题解决&#34;&gt;#&lt;/a&gt; 问题解决&lt;/h2&gt;
&lt;p&gt;当使用  &lt;code&gt;Cloudflare&lt;/code&gt;  的 &lt;code&gt;DNS&lt;/code&gt;  服务器和 &lt;code&gt;CDN&lt;/code&gt;  加速时，出现 “重定向次数过多” 的问题通常是由于  &lt;code&gt;SSL/TLS&lt;/code&gt;  设置不匹配导致的。&lt;/p&gt;
&lt;p&gt;具体设置如下:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902123859454.png&#34; class=&#34;&#34; title=&#34;image-20240902123859454&#34;&gt;&lt;/p&gt;
&lt;p&gt;找到自己的网站&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902123932939.png&#34; class=&#34;&#34; title=&#34;image-20240902123932939&#34;&gt;&lt;/p&gt;
&lt;p&gt;找到 &lt;code&gt;SSL/TLS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902124009509.png&#34; class=&#34;&#34; title=&#34;image-20240902124009509&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/image-20240902124036872.png&#34; class=&#34;&#34; title=&#34;image-20240902124036872&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;Full&lt;/code&gt;  和 &lt;code&gt;Full(Strict)&lt;/code&gt;  均可&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结论&#34;&gt;#&lt;/a&gt; 结论&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;CDN&lt;/code&gt;  加速后访问网站速度明显提升，更加流畅了&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</guid>
            <title>项目介绍</title>
            <link>https://kagurazakaasahi.github.io/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <pubDate>Sun, 01 Sep 2024 09:30:00 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;项目介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目介绍&#34;&gt;#&lt;/a&gt; 项目介绍&lt;/h1&gt;
&lt;h2 id=&#34;产品定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#产品定位&#34;&gt;#&lt;/a&gt; 产品定位&lt;/h2&gt;
&lt;p&gt;为餐饮企业定制的一款软件产品&lt;/p&gt;
&lt;h2 id=&#34;产品架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#产品架构&#34;&gt;#&lt;/a&gt; 产品架构&lt;/h2&gt;
&lt;h3 id=&#34;管理端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管理端&#34;&gt;#&lt;/a&gt; 管理端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;员工管理&lt;/li&gt;
&lt;li&gt;分类管理&lt;/li&gt;
&lt;li&gt;菜品管理&lt;/li&gt;
&lt;li&gt;套餐管理&lt;/li&gt;
&lt;li&gt;订单管理&lt;/li&gt;
&lt;li&gt;工作台&lt;/li&gt;
&lt;li&gt;数据统计&lt;/li&gt;
&lt;li&gt;来单提醒&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户端&#34;&gt;#&lt;/a&gt; 用户端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;微信登录&lt;/li&gt;
&lt;li&gt;商品浏览&lt;/li&gt;
&lt;li&gt;购物车&lt;/li&gt;
&lt;li&gt;用户下单&lt;/li&gt;
&lt;li&gt;微信支付&lt;/li&gt;
&lt;li&gt;历史订单&lt;/li&gt;
&lt;li&gt;地址管理&lt;/li&gt;
&lt;li&gt;用户催单&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技术选型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术选型&#34;&gt;#&lt;/a&gt; 技术选型&lt;/h2&gt;
&lt;h3 id=&#34;用户层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户层&#34;&gt;#&lt;/a&gt; 用户层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;VUE.js&lt;/li&gt;
&lt;li&gt;ElementUI&lt;/li&gt;
&lt;li&gt;微信小程序&lt;/li&gt;
&lt;li&gt;apache echarts&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网关层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网关层&#34;&gt;#&lt;/a&gt; 网关层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用层&#34;&gt;#&lt;/a&gt; 应用层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot&lt;/li&gt;
&lt;li&gt;Spring MVC&lt;/li&gt;
&lt;li&gt;Spring Task&lt;/li&gt;
&lt;li&gt;httpclient&lt;/li&gt;
&lt;li&gt;Spring Cache&lt;/li&gt;
&lt;li&gt;JWT&lt;/li&gt;
&lt;li&gt;阿里云 OSS&lt;/li&gt;
&lt;li&gt;Swagger&lt;/li&gt;
&lt;li&gt;POI&lt;/li&gt;
&lt;li&gt;WebSocket&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据层&#34;&gt;#&lt;/a&gt; 数据层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;mybatis&lt;/li&gt;
&lt;li&gt;pagehelper&lt;/li&gt;
&lt;li&gt;spring data redis&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;具体实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体实现&#34;&gt;#&lt;/a&gt; 具体实现&lt;/h2&gt;
&lt;h3 id=&#34;完善登录功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完善登录功能&#34;&gt;#&lt;/a&gt; 完善登录功能&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;修改数据库中的密码，改为 MD5 加密后的密文&lt;/li&gt;
&lt;li&gt;修改 JAVA 代码，前端提交的密码进行 MD5 加密后再跟数据库中的密码对比&lt;/li&gt;
&lt;li&gt;抛异常使用消息常量类&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;swagger的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#swagger的使用&#34;&gt;#&lt;/a&gt; swagger 的使用&lt;/h3&gt;
&lt;p&gt;swagger 可以方便的进行前后端联调，由于该项目仅涉及两位成员且沟通方便故未使用，仅学习了解过如何使用&lt;/p&gt;
&lt;h3 id=&#34;新增员工&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新增员工&#34;&gt;#&lt;/a&gt; 新增员工&lt;/h3&gt;
&lt;p&gt;前端提交的数据与实体类差别较大，故采用 DTO 来封装数据&lt;/p&gt;
&lt;p&gt;实体类（Entity）&lt;br /&gt;
与数据库表对应：实体类通常直接映射到数据库表，包含所有字段，便于持久化操作。&lt;br /&gt;
封装业务逻辑：实体类不仅仅是数据的载体，还可以包含业务逻辑和数据状态。&lt;br /&gt;
简化数据库操作：通过 ORM 框架（如 Hibernate），实体类可以简化数据库的增删改查操作。&lt;br /&gt;
DTO（数据传输对象）&lt;br /&gt;
数据传输优化：DTO 主要用于在不同层（如控制层和服务层）之间传输数据。它可以只包含需要传输的字段，减少不必要的数据传输，提高性能。&lt;br /&gt;
安全性：通过 DTO，可以避免直接暴露实体类中的敏感数据，增强系统的安全性。&lt;br /&gt;
解耦前后端：DTO 可以根据前端需求定制，避免前端直接依赖实体类，从而实现前后端的解耦。&lt;br /&gt;
简化数据转换：在复杂业务场景中，DTO 可以简化数据转换逻辑，避免在多个地方重复编写转换代码。&lt;br /&gt;
使用场景&lt;br /&gt;
实体类：适用于需要直接与数据库交互的场景，如 DAO 层。&lt;br /&gt;
DTO：适用于需要在不同层之间传输数据的场景，如控制层与服务层之间的数据传输。&lt;/p&gt;
&lt;h4 id=&#34;存储数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储数据&#34;&gt;#&lt;/a&gt; 存储数据&lt;/h4&gt;
&lt;p&gt;无须逐个设置实体对象属性，而是使用对象属性拷贝 ( &lt;code&gt;BeanUtils.copyProperties&lt;/code&gt; ), 再设置其他 DTO 中不存在的属性&lt;/p&gt;
&lt;h4 id=&#34;插入数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插入数据&#34;&gt;#&lt;/a&gt; 插入数据&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;@Insert(&amp;quot;insert into employee(name, username, password, phone) values(#&amp;#123;name&amp;#125;,#&amp;#123;username&amp;#125;,#&amp;#123;password&amp;#125;,#&amp;#123;phone&amp;#125;)&amp;quot;)
void insert(Employee employee)
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;MyBatis 提供了多种注解来简化 SQL 操作，避免了繁琐的 XML 配置。以下是一些常用的 MyBatis 注解及其用途：&lt;/p&gt;
&lt;p&gt;常用注解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;@Select：用于执行查询操作。
@Select(&amp;quot;SELECT * FROM employee WHERE id = #&amp;#123;id&amp;#125;&amp;quot;)
Employee selectById(int id);

@Insert：用于执行插入操作。
@Insert(&amp;quot;INSERT INTO employee(name, username, password, phone) VALUES(#&amp;#123;name&amp;#125;, #&amp;#123;username&amp;#125;, #&amp;#123;password&amp;#125;, #&amp;#123;phone&amp;#125;)&amp;quot;)
void insert(Employee employee);

@Update：用于执行更新操作。
@Update(&amp;quot;UPDATE employee SET name = #&amp;#123;name&amp;#125;, username = #&amp;#123;username&amp;#125;, password = #&amp;#123;password&amp;#125;, phone = #&amp;#123;phone&amp;#125; WHERE id = #&amp;#123;id&amp;#125;&amp;quot;)
void update(Employee employee);

@Delete：用于执行删除操作。
@Delete(&amp;quot;DELETE FROM employee WHERE id = #&amp;#123;id&amp;#125;&amp;quot;)
void delete(int id);

@Results 和 @Result：用于映射查询结果到对象属性。
@Select(&amp;quot;SELECT * FROM employee WHERE id = #&amp;#123;id&amp;#125;&amp;quot;)
@Results(&amp;#123;
    @Result(property = &amp;quot;id&amp;quot;, column = &amp;quot;id&amp;quot;),
    @Result(property = &amp;quot;name&amp;quot;, column = &amp;quot;name&amp;quot;),
    @Result(property = &amp;quot;username&amp;quot;, column = &amp;quot;username&amp;quot;),
    @Result(property = &amp;quot;password&amp;quot;, column = &amp;quot;password&amp;quot;),
    @Result(property = &amp;quot;phone&amp;quot;, column = &amp;quot;phone&amp;quot;)
&amp;#125;)
Employee selectById(int id);

@One 和 @Many：用于一对一和一对多的关系映射。
@Select(&amp;quot;SELECT * FROM department WHERE id = #&amp;#123;id&amp;#125;&amp;quot;)
@Results(&amp;#123;
    @Result(property = &amp;quot;id&amp;quot;, column = &amp;quot;id&amp;quot;),
    @Result(property = &amp;quot;name&amp;quot;, column = &amp;quot;name&amp;quot;),
    @Result(property = &amp;quot;employees&amp;quot;, column = &amp;quot;id&amp;quot;, 
            many = @Many(select = &amp;quot;selectEmployeesByDepartmentId&amp;quot;))
&amp;#125;)
Department selectById(int id);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;h4 id=&#34;代码完善&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码完善&#34;&gt;#&lt;/a&gt; 代码完善&lt;/h4&gt;
&lt;h5 id=&#34;录入的用户名已存在抛出异常未处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#录入的用户名已存在抛出异常未处理&#34;&gt;#&lt;/a&gt; 录入的用户名已存在，抛出异常未处理&lt;/h5&gt;
&lt;p&gt;添加异常处理即可。&lt;/p&gt;
&lt;h5 id=&#34;动态获取当前登录用户id&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态获取当前登录用户id&#34;&gt;#&lt;/a&gt; 动态获取当前登录用户 id&lt;/h5&gt;
&lt;p&gt;这里我们使用 JWT 技术。&lt;/p&gt;
&lt;p&gt;通过拦截器将 Token 令牌拦截，解析出用户 id，传给 save 方法。&lt;/p&gt;
&lt;p&gt;但是拦截器中并未直接调用 save 方法，那么该如何将解析到的用户 id 传给 save 方法呢？&lt;/p&gt;
&lt;p&gt;这里我们采用 ThreadLocal。&lt;/p&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;ThreadLocal&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;  并不是一个 Thread, 而是 Thread 的局部变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;  为每个线程提供单独一份存储空间，具有线程隔离的效果，只有线程内才能获取到对应的值，线程外则不能访问。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;通过观察 &lt;code&gt;ThreadId&lt;/code&gt;  很容易发现，每一次请求都是一个线程，故可以封装上述 &lt;code&gt;ThreadLocal&lt;/code&gt; , 添加 &lt;code&gt;setId&lt;/code&gt; , &lt;code&gt;getId&lt;/code&gt; , &lt;code&gt;removeId&lt;/code&gt;  方法成一个工具类 BaseContext、&lt;/p&gt;
&lt;p&gt;因此，在拦截器中将 Id 存入 &lt;code&gt;ThreadLocal&lt;/code&gt;  然后在 save 方法中取出即可。&lt;/p&gt;
&lt;h3 id=&#34;员工分页查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#员工分页查询&#34;&gt;#&lt;/a&gt; 员工分页查询&lt;/h3&gt;
&lt;h4 id=&#34;业务规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#业务规则&#34;&gt;#&lt;/a&gt; 业务规则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据页码展示员工信息&lt;/li&gt;
&lt;li&gt;每页展示 10 条数据&lt;/li&gt;
&lt;li&gt;分页查询时可以根据需要，输入员工的姓名进行查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;接口设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口设计&#34;&gt;#&lt;/a&gt; 接口设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;路径：&lt;/li&gt;
&lt;li&gt;请求方法：GET&lt;/li&gt;
&lt;li&gt;请求参数： &lt;code&gt;name&lt;/code&gt; ， &lt;code&gt;page&lt;/code&gt; ， &lt;code&gt;pagesize&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分页查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分页查询&#34;&gt;#&lt;/a&gt; 分页查询&lt;/h4&gt;
&lt;p&gt;一般是通过基于 &lt;code&gt;SQL&lt;/code&gt;  的 &lt;code&gt;limit&lt;/code&gt;  关键字进行分页查询，如:&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; employee &lt;span class=&#34;token keyword&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但是我们也可以使用分页查询插件，这里我使用的是 &lt;code&gt;pagehelper&lt;/code&gt; , 它基于拦截器动态拼接字符串&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;PageHelper&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;startPage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;employeePageQueryDTO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getPage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;employeePageQueryDTO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getPageSzie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Page&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;employee&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Page&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; employeeMapper&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;pageQuery&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;employeePageQueryDTO&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查询是模糊查询不是等值查询，故使用 &lt;code&gt;like&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码完善-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码完善-2&#34;&gt;#&lt;/a&gt; 代码完善&lt;/h4&gt;
&lt;p&gt;经测试，上述编写的代码存在数据格式的问题需要解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方式一：在属性上加入注解，对日期进行格式化&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;@JsonFormat(pattern = &amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;)
private LocalDateTime updateTime;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但上述方式只能对单一方法进行格式化，故推荐使用方式二统一格式化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方式二：在 &lt;code&gt;WebMvcConfiguration&lt;/code&gt;  中扩展 &lt;code&gt;SpringMVC&lt;/code&gt;  的消息转换器，统一对日期类型进行格式化处理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;protected void extendMessageConverters(List&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; converters)&amp;#123;
    log.warning(&amp;quot;开始扩展消息转换器...&amp;quot;);
    //创建一个消息转化器对象
    MappingJackson2HttpmessageConverter converter = new MappingJackson2HttpMessageConverter();
    //设置对象转换器,可以将Java对象转为json字符串
    converter.setObjectmapper(new JacksonObjectMapper());
    //将我们自己的转换器放入spring MVC框架的容器中
    converters.add(0,converter);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;启用禁用员工账号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启用禁用员工账号&#34;&gt;#&lt;/a&gt; 启用禁用员工账号&lt;/h3&gt;
&lt;h4 id=&#34;接口设计-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口设计-2&#34;&gt;#&lt;/a&gt; 接口设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;路径&lt;/li&gt;
&lt;li&gt;请求方式：POST&lt;/li&gt;
&lt;li&gt;请求参数：
&lt;ul&gt;
&lt;li&gt;Headers： &lt;code&gt;contentType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;路径参数: &lt;code&gt;status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Query: &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回数据: &lt;code&gt;code&lt;/code&gt; , &lt;code&gt;msg&lt;/code&gt; , &lt;code&gt;data&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编辑员工&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编辑员工&#34;&gt;#&lt;/a&gt; 编辑员工&lt;/h3&gt;
&lt;h3 id=&#34;公共字段自动填充&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公共字段自动填充&#34;&gt;#&lt;/a&gt; 公共字段自动填充&lt;/h3&gt;
&lt;h4 id=&#34;问题分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题分析&#34;&gt;#&lt;/a&gt; 问题分析&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/image-20240831172556784.png&#34; class=&#34;&#34; title=&#34;image-20240831172556784&#34;&gt;&lt;/p&gt;
&lt;p&gt;业务表中有公共字段，逐个赋值非常麻烦，之后也难以修改，不便于后期维护&lt;/p&gt;
&lt;p&gt;那么如何解决呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义注解 AutoFill, 用于标识需要进行公共字段自动填充的方法&lt;/li&gt;
&lt;li&gt;自定义切面类 AutoFillAspect, 统一拦截加入了 AutoFill 注解的方法，通过反射为公共字段赋值&lt;/li&gt;
&lt;li&gt;在 Mapper 方法上加入 AutoFill 注解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术点：枚举，注解，AOP, 反射&lt;/p&gt;
&lt;h3 id=&#34;新增菜品&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新增菜品&#34;&gt;#&lt;/a&gt; 新增菜品&lt;/h3&gt;
&lt;h4 id=&#34;需求分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需求分析&#34;&gt;#&lt;/a&gt; 需求分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;菜品必须是唯一的&lt;/li&gt;
&lt;li&gt;菜品必须在某个分类下，不能单独存在&lt;/li&gt;
&lt;li&gt;新增菜品时可根据情况选择菜品的口味&lt;/li&gt;
&lt;li&gt;每个菜品必须对应一张图片&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;接口设计-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口设计-3&#34;&gt;#&lt;/a&gt; 接口设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据类型查询分类 (已完成)&lt;/li&gt;
&lt;li&gt;文件上传&lt;/li&gt;
&lt;li&gt;新增菜品&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件上传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件上传&#34;&gt;#&lt;/a&gt; 文件上传&lt;/h4&gt;
&lt;p&gt;使用阿里云 oss 存储上传的二进制文件&lt;/p&gt;
&lt;p&gt;使用 UUID 来重命名，防止出现重名的情况&lt;/p&gt;
&lt;p&gt;新增菜品和口味时涉及两张表的操作&lt;/p&gt;
&lt;p&gt;涉及多张表 -&amp;gt; 保证事务一致性 -&amp;gt; 添加注解 &lt;code&gt;@Transactional&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;菜品分类查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#菜品分类查询&#34;&gt;#&lt;/a&gt; 菜品分类查询&lt;/h3&gt;
&lt;h3 id=&#34;删除菜品&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除菜品&#34;&gt;#&lt;/a&gt; 删除菜品&lt;/h3&gt;
&lt;p&gt;这里需要注意的是，如果菜品属于某一套餐，则不可随意删除，需要对菜品 - 口味关联表进行操作&lt;/p&gt;
&lt;h3 id=&#34;修改菜品&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改菜品&#34;&gt;#&lt;/a&gt; 修改菜品&lt;/h3&gt;
&lt;h4 id=&#34;接口设计-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口设计-4&#34;&gt;#&lt;/a&gt; 接口设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据 id 查询菜品&lt;/li&gt;
&lt;li&gt;根据类型查询分类 (已实现)&lt;/li&gt;
&lt;li&gt;文件上传 (已实现)&lt;/li&gt;
&lt;li&gt;修改菜品&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;具体实现-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体实现-2&#34;&gt;#&lt;/a&gt; 具体实现&lt;/h4&gt;
&lt;p&gt;修改操作在技术层面上转化为先删除，再重新插入新的数据&lt;/p&gt;
&lt;h3 id=&#34;店铺营业状态设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#店铺营业状态设置&#34;&gt;#&lt;/a&gt; 店铺营业状态设置&lt;/h3&gt;
&lt;h4 id=&#34;使用技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用技术&#34;&gt;#&lt;/a&gt; 使用技术&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;Spring Data Redis&lt;/code&gt;  再 JAVA 中操作 &lt;code&gt;Redis&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导入 &lt;code&gt;Spring Data Redis&lt;/code&gt;  的 &lt;code&gt;maven&lt;/code&gt;  坐标&lt;/li&gt;
&lt;li&gt;配置 &lt;code&gt;Redis&lt;/code&gt;  数据源&lt;/li&gt;
&lt;li&gt;编写配置类，	创建 &lt;code&gt;RedisTemple&lt;/code&gt;  对象&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;RedisTemple&lt;/code&gt;  对象操作 &lt;code&gt;Redis&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;需求分析-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需求分析-2&#34;&gt;#&lt;/a&gt; 需求分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;设置营业状态&lt;/li&gt;
&lt;li&gt;管理端查询营业状态&lt;/li&gt;
&lt;li&gt;用户端查询营业状态&lt;/li&gt;
&lt;li&gt;营业状态数据存储方式：基于 &lt;code&gt;Redis&lt;/code&gt;  的字符串来进行存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微信登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微信登录&#34;&gt;#&lt;/a&gt; 微信登录&lt;/h3&gt;
&lt;p&gt;添加小程序代码 (由他人开发，类似前端，由 js 文件组成)&lt;/p&gt;
&lt;h4 id=&#34;具体实现-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体实现-3&#34;&gt;#&lt;/a&gt; 具体实现&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;​	 小程序使用 &lt;code&gt;wx.login()&lt;/code&gt;  获取 &lt;code&gt;code&lt;/code&gt;  (授权码), 然后使用 &lt;code&gt;wx.request&lt;/code&gt;  发送 code 到开发者服务器&lt;/li&gt;
&lt;li&gt;开发者服务器获得 &lt;code&gt;code&lt;/code&gt;  后使用 &lt;code&gt;httpclient&lt;/code&gt;  将 &lt;code&gt;appid&lt;/code&gt; , &lt;code&gt;appsecret&lt;/code&gt; , &lt;code&gt;code&lt;/code&gt;  发送到微信接口&lt;/li&gt;
&lt;li&gt;微信接口返回 &lt;code&gt;session_key&lt;/code&gt;  和 &lt;code&gt;openid&lt;/code&gt;  (微信用户唯一标识，然后用其生成一个令牌给小程序&lt;/li&gt;
&lt;li&gt;最后小程序使用令牌来获取各种服务&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;商品与浏览功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#商品与浏览功能&#34;&gt;#&lt;/a&gt; 商品与浏览功能&lt;/h3&gt;
&lt;h4 id=&#34;接口设计-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口设计-5&#34;&gt;#&lt;/a&gt; 接口设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;查询分类&lt;/li&gt;
&lt;li&gt;根据分类 &lt;code&gt;id&lt;/code&gt;  查询菜品&lt;/li&gt;
&lt;li&gt;根据分类 &lt;code&gt;id&lt;/code&gt;  查询套餐&lt;/li&gt;
&lt;li&gt;根据套餐 &lt;code&gt;id&lt;/code&gt;  查询包含的菜品&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缓存菜品&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存菜品&#34;&gt;#&lt;/a&gt; 缓存菜品&lt;/h3&gt;
&lt;h4 id=&#34;问题说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题说明&#34;&gt;#&lt;/a&gt; 问题说明&lt;/h4&gt;
&lt;p&gt;用户端小程序展示的菜品都是通过查询数据库获得，如果用户访问量比较大，数据库访问压力随之增大。&lt;/p&gt;
&lt;h4 id=&#34;实现思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现思路&#34;&gt;#&lt;/a&gt; 实现思路&lt;/h4&gt;
&lt;p&gt;通过 &lt;code&gt;Redis&lt;/code&gt;  来缓存菜品数据，减少数据库查询操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/image-20240901111540778.png&#34; class=&#34;&#34; title=&#34;image-20240901111540778&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/image-20240901111924695.png&#34; class=&#34;&#34; title=&#34;image-20240901111924695&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;缓存套餐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存套餐&#34;&gt;#&lt;/a&gt; 缓存套餐&lt;/h3&gt;
&lt;h4 id=&#34;spring-cache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-cache&#34;&gt;#&lt;/a&gt; Spring Cache&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Spring Cache&lt;/code&gt;  是一个框架，实现了基于 &lt;code&gt;注解&lt;/code&gt; 的缓存功能，只需简单地加一个注解，就能实现缓存功能&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring Cache&lt;/code&gt;  提供了一层抽象，底层可以切换不同的缓存实现，例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EHCache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Caffeine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/image-20240901112515899.png&#34; class=&#34;&#34; title=&#34;image-20240901112515899&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加购物车&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加购物车&#34;&gt;#&lt;/a&gt; 添加购物车&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/image-20240901115033152.png&#34; class=&#34;&#34; title=&#34;image-20240901115033152&#34;&gt;&lt;/p&gt;
&lt;p&gt;对购物车表添加冗余字段，这样就无须多表联合查询，增加速度&lt;/p&gt;
&lt;h3 id=&#34;查看购物车&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看购物车&#34;&gt;#&lt;/a&gt; 查看购物车&lt;/h3&gt;
&lt;h3 id=&#34;清空购物车&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清空购物车&#34;&gt;#&lt;/a&gt; 清空购物车&lt;/h3&gt;
&lt;h3 id=&#34;导入地址簿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导入地址簿&#34;&gt;#&lt;/a&gt; 导入地址簿&lt;/h3&gt;
&lt;h4 id=&#34;业务功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#业务功能&#34;&gt;#&lt;/a&gt; 业务功能&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;查询地址列表&lt;/li&gt;
&lt;li&gt;新增地址&lt;/li&gt;
&lt;li&gt;修改地址&lt;/li&gt;
&lt;li&gt;删除地址&lt;/li&gt;
&lt;li&gt;设置默认地址&lt;/li&gt;
&lt;li&gt;查询默认地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;具体实现-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体实现-4&#34;&gt;#&lt;/a&gt; 具体实现&lt;/h4&gt;
&lt;p&gt;订单与订单明细表是一对多的关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;处理各种业务异常 (地址簿为空 / 购物车为空)&lt;/li&gt;
&lt;li&gt;向订单表插入一条数据&lt;/li&gt;
&lt;li&gt;向订单表明细插入 n 条数据&lt;/li&gt;
&lt;li&gt;清空当前用户的购物车数据&lt;/li&gt;
&lt;li&gt;封装 VO 返回结果&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;微信支付&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微信支付&#34;&gt;#&lt;/a&gt; 微信支付&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先用户向商户系统 (即本项目) 发出下单请求&lt;/li&gt;
&lt;li&gt;返回订单号&lt;/li&gt;
&lt;li&gt;在向商户系统申请微信支付&lt;/li&gt;
&lt;li&gt;商户系统调用微信下单接口，返回支付参数 (此时为预下单)&lt;/li&gt;
&lt;li&gt;最后用户用支付参数调起微信支付&lt;/li&gt;
&lt;li&gt;返回支付结果，同时商户系统获取支付结果并更新订单状态&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;订单状态定时处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#订单状态定时处理&#34;&gt;#&lt;/a&gt; 订单状态定时处理&lt;/h3&gt;
&lt;h4 id=&#34;spring-task&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-task&#34;&gt;#&lt;/a&gt; Spring Task&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Spring Task&lt;/code&gt;  是 &lt;code&gt;Spring&lt;/code&gt;  框架提供的任务调度工具，可以按照	约定的时间自动执行某个代码逻辑&lt;/p&gt;
&lt;h4 id=&#34;cron表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cron表达式&#34;&gt;#&lt;/a&gt; cron 表达式&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;cron&lt;/code&gt;  表达式其实就是一个字符串，通过 &lt;code&gt;cron&lt;/code&gt;  表达式可以 &lt;code&gt;定义任务触发的时间&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;构成规则：分为 &lt;code&gt;6&lt;/code&gt;  或 &lt;code&gt;7&lt;/code&gt;  个域，由空格分隔开，每个域代表一个含义 (秒 / 分钟 / 小时 / 日 / 月 / 周 / 年 (可选))&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/image-20240901134936435.png&#34; class=&#34;&#34; title=&#34;image-20240901134936435&#34;&gt;&lt;/p&gt;
&lt;p&gt;在线生成 &lt;code&gt;cron&lt;/code&gt;  表达式&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcm9uLnFxZTIuY29tLw==&#34;&gt;在线 Cron 表达式生成器 (qqe2.com)&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;需求分析-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需求分析-3&#34;&gt;#&lt;/a&gt; 需求分析&lt;/h4&gt;
&lt;p&gt;问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户下单后未支付，订单一直处于 &lt;code&gt;&amp;quot;待支付&amp;quot;&lt;/code&gt;  状态&lt;/li&gt;
&lt;li&gt;用户收货后管理端未点击完成按钮，订单一直处于 &lt;code&gt;&amp;quot;派送中&amp;quot;&lt;/code&gt;  状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过定时任务 &lt;code&gt;每分钟检查一次&lt;/code&gt; 是否存在超时订单 (下单后超过 15 分钟未支付), 如果则存在修改为 &amp;quot;已取消&amp;quot;&lt;/li&gt;
&lt;li&gt;通过定时任务 &lt;code&gt;每天凌晨检查一次&lt;/code&gt; 是否存在 &amp;quot;派送中&amp;quot; 的订单，如果存在则修改为 &amp;quot;已完成&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;来单提醒&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#来单提醒&#34;&gt;#&lt;/a&gt; 来单提醒&lt;/h3&gt;
&lt;h4 id=&#34;websocket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#websocket&#34;&gt;#&lt;/a&gt; WebSocket&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;WebSocket&lt;/code&gt;  是基于 &lt;code&gt;TCP&lt;/code&gt;  的一种新的网络协议。它实现了浏览器与服务器全双工通信 —— 浏览器和服务器只需要完成一次握手，两者之间就可以创建 &lt;code&gt;持久性&lt;/code&gt; 的连接，并进行	 &lt;code&gt;双向&lt;/code&gt; 数据传输。&lt;/p&gt;
&lt;h4 id=&#34;需求分析-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需求分析-4&#34;&gt;#&lt;/a&gt; 需求分析&lt;/h4&gt;
&lt;p&gt;用户下单并且支付成功后，需要第一时间通知外卖商家。通知形式有如下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语言播报&lt;/li&gt;
&lt;li&gt;弹出提示框&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;WebSocket&lt;/code&gt;  实现管理端页面和服务端保持长连接状态&lt;/li&gt;
&lt;li&gt;当客户支付后，调用 &lt;code&gt;WebSocket&lt;/code&gt;  的相关 &lt;code&gt;API&lt;/code&gt;  实现服务端向客户端推送消息&lt;/li&gt;
&lt;li&gt;客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报&lt;/li&gt;
&lt;li&gt;约定服务端发送给客户端浏览器的数据格式为 &lt;code&gt;JSON&lt;/code&gt; , 字段包括: &lt;code&gt;type&lt;/code&gt; , &lt;code&gt;orderId&lt;/code&gt; , &lt;code&gt;content&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;  为消息类型， &lt;code&gt;1&lt;/code&gt;  为来单提醒， &lt;code&gt;2&lt;/code&gt;  为客户催单&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orderId&lt;/code&gt;  为订单 &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt;  为消息内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;营业额统计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#营业额统计&#34;&gt;#&lt;/a&gt; 营业额统计&lt;/h3&gt;
&lt;h4 id=&#34;apache-echarts&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache-echarts&#34;&gt;#&lt;/a&gt; Apache ECharts&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;ECharts&lt;/code&gt; , 重点在于研究当前图表所需的 &lt;code&gt;数据格式&lt;/code&gt; 。通常是需要后端提供符合格式要求的动态数据，然后响应给前端来展示图表。&lt;/p&gt;
&lt;h3 id=&#34;用户统计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户统计&#34;&gt;#&lt;/a&gt; 用户统计&lt;/h3&gt;
&lt;p&gt;统计用户数量&lt;/p&gt;
&lt;h3 id=&#34;订单统计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#订单统计&#34;&gt;#&lt;/a&gt; 订单统计&lt;/h3&gt;
&lt;h3 id=&#34;销量排名统计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#销量排名统计&#34;&gt;#&lt;/a&gt; 销量排名统计&lt;/h3&gt;
&lt;h3 id=&#34;工作台&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工作台&#34;&gt;#&lt;/a&gt; 工作台&lt;/h3&gt;
&lt;p&gt;工作台是系统运营的看板，并提供快捷操作入口，可以有效提高商家的工作效率&lt;/p&gt;
&lt;p&gt;工作台展示的数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;今日数据&lt;/li&gt;
&lt;li&gt;订单管理&lt;/li&gt;
&lt;li&gt;菜品总览&lt;/li&gt;
&lt;li&gt;套餐总览&lt;/li&gt;
&lt;li&gt;订单信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每组数据对应一个接口，减少代码耦合性&lt;/p&gt;
&lt;h3 id=&#34;导出运营数据excel报表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导出运营数据excel报表&#34;&gt;#&lt;/a&gt; 导出运营数据 Excel 报表&lt;/h3&gt;
&lt;h4 id=&#34;apache-poi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache-poi&#34;&gt;#&lt;/a&gt; Apache POI&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Apache POI&lt;/code&gt;  是一个处理 &lt;code&gt;Microsoft Office&lt;/code&gt;  各种文件格式的开源项目。简单来说就是，我们可以使用 &lt;code&gt;POI&lt;/code&gt;  在 &lt;code&gt;Java&lt;/code&gt;  程序中对 &lt;code&gt;Microsoft Office&lt;/code&gt;  各种文件进行读写操作。&lt;/p&gt;
&lt;p&gt;一般情况下， &lt;code&gt;POI&lt;/code&gt;  都是用于操作 &lt;code&gt;Excel&lt;/code&gt;  文件。&lt;/p&gt;
&lt;p&gt;应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;银行网银系统导出交易明细&lt;/li&gt;
&lt;li&gt;各种业务系统导出 &lt;code&gt;Excel&lt;/code&gt;  报表&lt;/li&gt;
&lt;li&gt;批量导入业务数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;需求分析-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需求分析-5&#34;&gt;#&lt;/a&gt; 需求分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;导出 &lt;code&gt;Excel&lt;/code&gt;  形式的报表文件&lt;/li&gt;
&lt;li&gt;导出最近 30 天的运营数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;当前接口没有返回数据,因为报表导出的本质是文件下载&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;服务端会通过输出流将 &lt;code&gt;Excel&lt;/code&gt;  文件下载到客户端浏览器&lt;/p&gt;
&lt;h2 id=&#34;亮点难点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#亮点难点&#34;&gt;#&lt;/a&gt; 亮点难点&lt;/h2&gt;
&lt;h3 id=&#34;nginx反向代理和负载均衡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx反向代理和负载均衡&#34;&gt;#&lt;/a&gt; Nginx 反向代理和负载均衡&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt;  是一款轻量级的 &lt;code&gt;web&lt;/code&gt;  服务器，反向代理服务器、电子邮件代理服务器，特点是占有内存少、并发能力强。Nginx 反向代理就是将前端发送的动态请求由 Nginx 转发到后端服务器，负载均衡从本质上来说也是基于反向代理来实现的，最终都是转发请求。&lt;/p&gt;
&lt;p&gt;Nginx 反向代理的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高访问速度：因为 nginx 本身可以进行缓存，如果访问的同一接口，并且做了数据缓存，nginx 就直接可把数据返回，不需要真正地访问服务端，从而提高访问速度。&lt;/li&gt;
&lt;li&gt;进行负载均衡：所谓负载均衡，就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器。&lt;/li&gt;
&lt;li&gt;保证后端服务安全：因为一般后台服务地址不会暴露，所以使用浏览器不能直接访问，可以把 nginx 作为请求访问的入口，请求到达 nginx 后转发到具体的服务中，从而保证后端服务的安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;负载均衡&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;负载均衡（Load Balancing）是一种技术，用于将网络流量或工作负载分配到多个服务器或计算资源上，以提高系统的性能、可靠性和可扩展性。它的主要目标是确保每个服务器的负载尽可能均衡，从而避免单个服务器过载，提升整体系统的响应速度和可用性。&lt;/p&gt;
&lt;p&gt;负载均衡的实现方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;硬件负载均衡&lt;br /&gt;
硬件负载均衡器是专用设备，通常具有高性能和高可靠性。常见的硬件负载均衡器包括 F5 和 A10。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优点：性能强大，支持复杂的负载均衡算法，安全性高。&lt;br /&gt;
缺点：成本高，扩展性差。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;软件负载均衡&lt;br /&gt;
软件负载均衡器运行在标准服务器上，常见的有 Nginx、HAProxy 和 LVS。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优点：成本低，扩展性好，易于部署和维护。&lt;br /&gt;
缺点：性能相对硬件负载均衡器略低。&lt;br /&gt;
负载均衡的常见算法&lt;br /&gt;
轮询（Round Robin）：将请求依次分配给每个服务器，适用于负载均衡器和服务器性能相近的情况。&lt;br /&gt;
加权轮询（Weighted Round Robin）：根据服务器的性能分配权重，性能高的服务器分配更多请求。&lt;br /&gt;
最少连接（Least Connections）：将请求分配给当前连接数最少的服务器，适用于长连接的情况。&lt;br /&gt;
源地址哈希（Source IP Hash）：根据请求源 IP 地址的哈希值分配服务器，适用于需要会话保持的情况。&lt;br /&gt;
负载均衡的应用场景&lt;br /&gt;
 Web 服务器集群：通过负载均衡分配 HTTP 请求，提高网站的并发处理能力。&lt;br /&gt;
数据库集群：分配数据库查询请求，提升数据库的读写性能。&lt;br /&gt;
微服务架构：在微服务架构中，负载均衡用于分配服务请求，确保各个服务实例的负载均衡。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;h3 id=&#34;使用jwt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用jwt&#34;&gt;#&lt;/a&gt; 使用 JWT&lt;/h3&gt;
&lt;p&gt;原本计划使用 Session 和验证码，考虑到如下因素最后选择了 &lt;code&gt;JWT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 JWT（JSON Web Token）相比传统的 Session 和验证码有以下几个优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;无状态性&lt;br /&gt;
优点：JWT 是无状态的，服务器不需要存储会话信息。每个请求都携带 JWT，服务器只需验证 JWT 的有效性即可。这使得 JWT 非常适合分布式系统和微服务架构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可扩展性&lt;br /&gt;
优点：由于 JWT 包含了用户信息和声明，可以在不同的服务器之间传递和验证。这解决了 Session 在跨服务器交换数据时的局限性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;减少服务器负担&lt;br /&gt;
优点：JWT 存储在客户端（如 Local Storage 或 Cookie 中），每次请求都携带 JWT，减少了服务器的会话管理开销。这对于高并发应用尤其有利。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跨语言支持&lt;br /&gt;
优点：JWT 采用 JSON 格式，易于读写，适用于多种编程语言。这使得 JWT 在不同技术栈之间的集成变得更加容易。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全性&lt;br /&gt;
优点：JWT 通过签名机制确保数据的完整性和真实性。虽然 JWT 的 Payload 部分没有加密，但签名可以防止数据被篡改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;灵活性&lt;br /&gt;
优点：JWT 可以存储一些常用信息，用于交换信息。这可以减少服务器查询数据库的次数，提高性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适用于移动端和单页应用&lt;br /&gt;
优点：JWT 特别适合移动端应用和单页应用（SPA），因为它们通常需要跨域请求和无状态认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简化认证流程&lt;br /&gt;
优点：JWT 可以简化认证流程，用户登录后，服务器生成 JWT 并返回给客户端，客户端在后续请求中携带 JWT 即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，JWT 也有一些缺点，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全性：由于 Payload 部分没有加密，不能存储敏感数据。&lt;/li&gt;
&lt;li&gt;性能：JWT 较长，每次请求都携带 JWT，可能增加网络传输开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;高并发处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高并发处理&#34;&gt;#&lt;/a&gt; 高并发处理&lt;/h3&gt;
&lt;p&gt;由于菜品表，套餐表都存储在硬盘上，故当多人请求时，难免会出现卡顿，影响用户体验，因此我使用 &lt;code&gt;Redis&lt;/code&gt;  进行缓存。这样由于数据存储在内存中，数据获取效率大大提升.&lt;/p&gt;
&lt;h2 id=&#34;细节补充&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#细节补充&#34;&gt;#&lt;/a&gt; 细节补充&lt;/h2&gt;
&lt;h3 id=&#34;实现功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现功能&#34;&gt;#&lt;/a&gt; 实现功能&lt;/h3&gt;
&lt;h4 id=&#34;管理端-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管理端-2&#34;&gt;#&lt;/a&gt; 管理端&lt;/h4&gt;
&lt;p&gt;实现了员工，分类，菜品，套餐，订单管理&lt;/p&gt;
&lt;p&gt;工作台用于快速到达所需功能，来单提醒用于接单&lt;/p&gt;
&lt;p&gt;最后还有数据统计，包括可视化图表与 &lt;code&gt;excel&lt;/code&gt;  导出&lt;/p&gt;
&lt;h4 id=&#34;用户端-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户端-2&#34;&gt;#&lt;/a&gt; 用户端&lt;/h4&gt;
&lt;p&gt;用户端主要使用微信小程序进行下单&lt;/p&gt;
&lt;p&gt;包括常见的微信登录，支付，商品浏览下单，购物车&lt;/p&gt;
&lt;p&gt;历史订单，地址管理，用户催单功能&lt;/p&gt;
&lt;h3 id=&#34;细节问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#细节问题&#34;&gt;#&lt;/a&gt; 细节问题&lt;/h3&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;该项目有哪些模块，作用分别是什么&lt;/summary&gt;&lt;div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;模块&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;sky-take-out&lt;/td&gt;
&lt;td&gt;maven 父工程，统一管理依赖版本，聚合其他子模块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;sky-common&lt;/td&gt;
&lt;td&gt;子模块，存放公共类，例如：工具类、常量类、异常类等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;sky-pojo&lt;/td&gt;
&lt;td&gt;子模块，存放实体类、VO、DTO 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;sky-server&lt;/td&gt;
&lt;td&gt;子模块，后端服务，存放配置文件、Controller、Service、Mapper 等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;概述登录流程怎么实现的，为什么要加拦截器&lt;/summary&gt;&lt;div&gt;
&lt;h3 id=&#34;登录流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登录流程&#34;&gt;#&lt;/a&gt; 登录流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户提交登录请求&lt;/strong&gt;：用户在前端输入用户名和密码，提交登录请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器验证用户信息&lt;/strong&gt;：服务器接收到请求后，验证用户名和密码是否正确。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成 JWT 令牌&lt;/strong&gt;：如果验证通过，服务器生成一个 JWT（JSON Web Token）令牌，并将其返回给前端。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前端存储令牌&lt;/strong&gt;：前端接收到 JWT 令牌后，将其存储在本地（如 LocalStorage 或 SessionStorage）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;携带令牌访问受保护资源&lt;/strong&gt;：在后续的请求中，前端会在请求头中携带 JWT 令牌，以访问受保护的资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;为什么要加拦截器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要加拦截器&#34;&gt;#&lt;/a&gt; 为什么要加拦截器&lt;/h3&gt;
&lt;p&gt;拦截器在登录流程中起到了关键作用，主要有以下几个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;验证请求合法性&lt;/strong&gt;：拦截器可以在每次请求到达服务器之前，检查请求头中是否包含有效的 JWT 令牌。如果没有令牌或令牌无效，拦截器可以直接拒绝请求，确保只有合法用户才能访问受保护的资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化代码&lt;/strong&gt;：通过拦截器，可以将令牌验证的逻辑集中处理，避免在每个受保护的接口中重复编写验证代码，提高代码的可维护性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增强安全性&lt;/strong&gt;：拦截器可以防止未授权的访问，保护敏感数据和功能不被非法用户获取。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;ThreadLocal作用是什么，怎么使用的&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;是线程的局部变量，在登录过程中，作为媒介，将用户 &lt;code&gt;id&lt;/code&gt;  传给 save 方法保存信息&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;为什么做全局异常处理，怎么实现的&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;原因：抛出的自定义异常不会提示给用户，真正出异常又会给客户端一堆看不懂的提示，因此需要全局异常处理&lt;/p&gt;
&lt;p&gt;实现：server 模块下，exception 文件夹下&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;分类删除注意什么问题？怎么实现的&lt;/summary&gt;&lt;div&gt;
&lt;h3 id=&#34;注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意事项&#34;&gt;#&lt;/a&gt; 注意事项&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检查关联数据&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;菜品&lt;/strong&gt;：确保该分类下没有关联的菜品。如果有，需要先处理这些菜品（如重新分类或删除）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;套餐&lt;/strong&gt;：确保该分类下没有关联的套餐。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据完整性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事务管理&lt;/strong&gt;：使用事务管理，确保删除操作的原子性，避免部分删除导致数据不一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;级联删除&lt;/strong&gt;：如果有级联关系（如分类删除后需要删除关联的菜品），需要确保级联删除的正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务规则&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;状态检查&lt;/strong&gt;：通常不允许删除正在使用中的分类（如有菜品正在销售）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权限控制&lt;/strong&gt;：确保只有有权限的用户才能执行删除操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实现步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现步骤&#34;&gt;#&lt;/a&gt; 实现步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检查关联数据&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在删除分类前，查询该分类下是否有菜品或套餐。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除分类&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果没有关联数据，可以安全删除分类。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务管理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用  &lt;code&gt;@Transactional&lt;/code&gt;  注解确保操作的原子性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;AOP字段填充怎么实现的&lt;/summary&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自定义注解&lt;/p&gt;
&lt;p&gt;用于标识需要自动填充字段的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义切面类&lt;/p&gt;
&lt;p&gt;创建一个切面类，拦截带有 &lt;code&gt;@AutoFill&lt;/code&gt;  注解的方法，并通过反射为实体对象的公共字段赋值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;Mapper&lt;/code&gt;  方法上使用注解&lt;/p&gt;
&lt;p&gt;在需要自动填充字段的方法上添加 &lt;code&gt;@AutoFill&lt;/code&gt;  注解&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;文件上传有哪些方式，项目中怎么实现的&lt;/summary&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本地存储&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：开发简单，成本低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：扩展性差，服务器存储空间有限。&lt;/li&gt;
&lt;li&gt;实现步骤：
&lt;ol&gt;
&lt;li&gt;前端通过表单上传文件，使用  &lt;code&gt;multipart/form-data&lt;/code&gt;  编码类型。&lt;/li&gt;
&lt;li&gt;后端接收文件并保存到服务器指定目录。&lt;/li&gt;
&lt;li&gt;返回文件的访问路径给前端。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云存储（如阿里云 OSS）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：扩展性好，支持大规模存储，免维护。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：需要付费。&lt;/li&gt;
&lt;li&gt;实现步骤：
&lt;ol&gt;
&lt;li&gt;配置阿里云 OSS 相关信息（如 endpoint、accessKeyId、accessKeySecret、bucketName）。&lt;/li&gt;
&lt;li&gt;使用阿里云 OSS SDK 上传文件到云存储。&lt;/li&gt;
&lt;li&gt;返回文件的访问路径给前端。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前学习的项目都是本地存储，本着尝试的目的，并且作为学生可以试用阿里云 oss, 故使用阿里云 oss, 采用云存储的方式上传图片&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;菜品分页需要关联展示分类名称，怎么实现的&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;前端提交的数据与实体类差距较大，例如状态，时间等是实体类没有的，故使用 DTO 类封装数据，然后就是惯例的 &lt;code&gt;Mapper&lt;/code&gt; , &lt;code&gt;Controller&lt;/code&gt; , &lt;code&gt;Service&lt;/code&gt; .&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;菜品修改时，关联的菜品口味如何修改的&lt;/summary&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;获取菜品信息&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;首先，从数据库中获取需要修改的菜品信息，包括其关联的口味信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改菜品信息&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;更新菜品的基本信息，如名称、价格、描述等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新关联的口味信息&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;根据菜品的 ID，查询并更新其关联的口味信息。可以使用 MyBatis 的关联查询功能来实现这一点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保存修改&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;将修改后的菜品信息和口味信息保存到数据库中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;菜品起售停售注意事项，如何实现&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;这里要考虑的是数据一致性，确保菜品状态的修改不会影响其他关联数据的完整性。&lt;/p&gt;
&lt;p&gt;例如，停售菜品要检查是否有未完成的订单。&lt;/p&gt;
&lt;p&gt;由于涉及多表操作，建议使用事务管理来确保数据的一致性和操作的原子性&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;概述HttpClient的作用&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;code&gt;HttpClient&lt;/code&gt;  的主要作用是&lt;strong&gt;发送 HTTP 请求和接收响应数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在本项目中， &lt;code&gt;HttpClient&lt;/code&gt;  是将授权码 &lt;code&gt;code&lt;/code&gt;  及 &lt;code&gt;appId&lt;/code&gt;  和 &lt;code&gt;appsecret&lt;/code&gt;  发送到微信接口&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;概述微信登录实现流程&lt;/summary&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;​	 小程序使用 &lt;code&gt;wx.login()&lt;/code&gt;  获取 &lt;code&gt;code&lt;/code&gt;  (授权码), 然后使用 &lt;code&gt;wx.request&lt;/code&gt;  发送 code 到开发者服务器&lt;/li&gt;
&lt;li&gt;开发者服务器获得 &lt;code&gt;code&lt;/code&gt;  后使用 &lt;code&gt;httpclient&lt;/code&gt;  将 &lt;code&gt;appid&lt;/code&gt; , &lt;code&gt;appsecret&lt;/code&gt; , &lt;code&gt;code&lt;/code&gt;  发送到微信接口&lt;/li&gt;
&lt;li&gt;微信接口返回 &lt;code&gt;session_key&lt;/code&gt;  和 &lt;code&gt;openid&lt;/code&gt;  (微信用户唯一标识，然后用其生成一个令牌给小程序&lt;/li&gt;
&lt;li&gt;最后小程序使用令牌来获取各种服务&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;小程序首页菜品数据怎么查询的&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;这部分是由他人负责的，但根据我的了解，主要还是后端编写查询接口，前端通过 &lt;code&gt;wx.request&lt;/code&gt;  方法发送 &lt;code&gt;HTTP&lt;/code&gt;  请求获取数据的&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;小程序首页套餐数据怎么查询的&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;redis中有哪些数据类型&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;常见的有 &lt;code&gt;String&lt;/code&gt; , &lt;code&gt;Hash&lt;/code&gt; , &lt;code&gt;List&lt;/code&gt; , &lt;code&gt;Set&lt;/code&gt; , &lt;code&gt;ZSet&lt;/code&gt;  等&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;概述菜品缓存流程&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;数据库与redis如何实现的数据同步&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;为什么用了redis还用SpringCache&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;SpringCache有哪些注解&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;SpringCache在项目中如何使用的&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;概述添加购物车流程&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;概述订单提交实现流程&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;概述历史订单实现流程&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;概述再来一单实现流程&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;定时任务如何实现的&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;cron表达式有哪些特殊符号，分别表示什么意思&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;项目中定时任务如何使用的&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;使用 &lt;code&gt;cron&lt;/code&gt;  表达式&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;说说WebSocket和HTTP协议的区别&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;项目中用WebSocket实现了哪些功能，怎么实现的&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;营业额统计数据如何设计VO对象封装的&lt;/summary&gt;&lt;div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;Excel导入导出有哪些技术方案？&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;有很多，我最终使用的是 &lt;code&gt;Apache POI&lt;/code&gt; , 针对 &lt;code&gt;Microsoft Office&lt;/code&gt;  的开源项目&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;JWT储存在前端的哪个地方&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;在前端存储 JWT（JSON Web Token）时，有几种常见的方法，每种方法都有其优缺点：&lt;/p&gt;
&lt;p&gt;Local Storage：&lt;br /&gt;
优点：易于实现，持久化存储，即使刷新页面也不会丢失。&lt;br /&gt;
缺点：容易受到 XSS（跨站脚本）攻击，因为任何运行在同一域上的 JavaScript 代码都可以访问 Local Storage。&lt;br /&gt;
Session Storage：&lt;br /&gt;
优点：与 Local Storage 类似，但数据仅在会话期间有效，浏览器关闭后数据会被清除。&lt;br /&gt;
缺点：同样容易受到 XSS 攻击。&lt;br /&gt;
Cookies：&lt;br /&gt;
优点：可以设置 HttpOnly 和 Secure 标志，增加安全性。HttpOnly 标志可以防止 JavaScript 访问 Cookie，从而减少 XSS 攻击的风险。Secure 标志确保 Cookie 只能通过 HTTPS 传输。&lt;br /&gt;
缺点：需要处理 CSRF（跨站请求伪造）攻击，可以通过使用 SameSite 属性来缓解。&lt;br /&gt;
内存中：&lt;br /&gt;
优点：最安全，因为数据仅在内存中存储，页面刷新或关闭浏览器后数据会丢失。&lt;br /&gt;
缺点：用户每次刷新页面或关闭浏览器后需要重新登录。&lt;br /&gt;
综合考虑安全性和易用性，使用 HttpOnly 和 Secure 标志的 Cookie 是推荐的存储方式。这种方法可以有效防止 XSS 攻击，同时通过适当的配置减少 CSRF 攻击的风险。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;项目涉及https传输，说说其原理&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;HTTPS（HyperText Transfer Protocol Secure）是 HTTP 的安全版本，用于在客户端（如浏览器）和服务器之间安全地传输数据。它通过加密通信来保护数据的机密性和完整性。以下是 HTTPS 的工作原理：&lt;/p&gt;
&lt;p&gt;SSL/TLS 协议：&lt;br /&gt;
HTTPS 使用 SSL（Secure Sockets Layer）或其后继者 TLS（Transport Layer Security）协议来加密数据传输。TLS 是目前更常用的协议。&lt;br /&gt;
这些协议通过加密数据来防止数据在传输过程中被窃取或篡改。&lt;br /&gt;
公钥和私钥：&lt;br /&gt;
HTTPS 使用一种称为非对称加密的技术，这种技术使用一对密钥：公钥和私钥。&lt;br /&gt;
公钥用于加密数据，任何人都可以获取公钥并使用它来加密数据。&lt;br /&gt;
私钥用于解密数据，只有服务器拥有私钥。&lt;br /&gt;
SSL/TLS 证书：&lt;br /&gt;
服务器需要一个 SSL/TLS 证书来启用 HTTPS。证书由受信任的证书颁发机构（CA）签发，包含公钥和服务器的身份信息。&lt;br /&gt;
当客户端连接到服务器时，服务器会发送其 SSL/TLS 证书给客户端。&lt;br /&gt;
握手过程：&lt;br /&gt;
客户端和服务器通过一个称为握手的过程来建立安全连接。&lt;br /&gt;
在握手过程中，客户端验证服务器的证书，确保其真实性。&lt;br /&gt;
一旦验证通过，客户端和服务器将生成一个对称密钥，用于加密后续的通信。对称加密比非对称加密更快，因此用于实际的数据传输。&lt;br /&gt;
数据加密：&lt;br /&gt;
一旦握手完成，客户端和服务器之间的所有数据传输都将使用对称密钥进行加密。&lt;br /&gt;
这确保了即使数据在传输过程中被截获，攻击者也无法解密和读取数据。&lt;br /&gt;
通过这些步骤，HTTPS 提供了一个安全的通信渠道，保护敏感信息（如密码、信用卡信息等）在传输过程中的安全。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;如何设计一个短信验证码登录&lt;/summary&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;前端请求验证码&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户在登录页面输入手机号码并点击获取验证码按钮。&lt;/li&gt;
&lt;li&gt;前端发送请求到后端，要求发送短信验证码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后端生成验证码&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;后端生成一个随机的验证码（通常是 6 位数字）。&lt;/li&gt;
&lt;li&gt;将验证码和手机号码关联，并存储在缓存中（如 Redis），设置一个有效期（如 5 分钟）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发送短信验证码&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用第三方短信服务（如阿里云短信服务、腾讯云短信服务等）将验证码发送到用户的手机号码。&lt;/li&gt;
&lt;li&gt;确保短信内容简洁明了，包含验证码和有效期提示。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户输入验证码登录&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户在登录页面输入收到的验证码和手机号码，并提交登录请求。&lt;/li&gt;
&lt;li&gt;前端将手机号码和验证码发送到后端进行验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后端验证验证码&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;后端接收到登录请求后，从缓存中获取存储的验证码。&lt;/li&gt;
&lt;li&gt;验证用户输入的验证码是否正确且在有效期内。&lt;/li&gt;
&lt;li&gt;如果验证通过，生成 JWT（JSON Web Token）或其他类型的令牌，并返回给前端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前端存储令牌&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;前端接收到令牌后，将其存储在合适的位置（如 Local Storage、Session Storage 或 Cookie）。&lt;/li&gt;
&lt;li&gt;在后续的请求中，前端将令牌包含在请求头中，以便后端进行身份验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;怎么拦截获取验证码的重复请求&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;为了防止用户重复请求验证码，可以采取以下几种方法：&lt;/p&gt;
&lt;p&gt;前端按钮禁用：&lt;br /&gt;
在用户点击获取验证码按钮后，将按钮禁用一段时间（例如 60 秒），防止用户在短时间内多次点击。&lt;br /&gt;
可以使用 JavaScript 设置一个倒计时，倒计时结束后重新启用按钮。&lt;/p&gt;
&lt;p&gt;后端请求频率限制：&lt;br /&gt;
在后端设置一个请求频率限制，例如每个手机号码每分钟只能请求一次验证码。&lt;br /&gt;
可以使用 Redis 等缓存工具来存储请求时间，并在每次请求时检查是否超过了限制。&lt;/p&gt;
&lt;p&gt;唯一请求标识：&lt;br /&gt;
使用唯一请求标识（如 UUID）来标识每个请求，并在后端记录这些标识。&lt;br /&gt;
如果检测到重复的请求标识，则拒绝处理该请求。&lt;/p&gt;
&lt;p&gt;通过这些方法，可以有效地防止用户重复请求验证码，提升系统的安全性和用户体验。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;get与post的区别&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;GET 和 POST 是 HTTP 协议中最常用的两种请求方法，它们在使用场景和特性上有一些重要的区别：&lt;/p&gt;
&lt;p&gt;用途：&lt;br /&gt;
GET：主要用于从服务器获取数据。请求参数会附加在 URL 后面。&lt;br /&gt;
POST：主要用于向服务器提交数据。请求参数包含在请求体中。&lt;br /&gt;
安全性：&lt;br /&gt;
GET：参数暴露在 URL 中，容易被截获，不适合传输敏感信息。&lt;br /&gt;
POST：参数在请求体中，相对更安全，但仍需使用 HTTPS 保护数据传输。&lt;br /&gt;
数据长度限制：&lt;br /&gt;
GET：由于 URL 长度限制，传输的数据量有限（通常不超过 2048 个字符）。&lt;br /&gt;
POST：没有数据长度限制，可以传输大量数据。&lt;br /&gt;
幂等性：&lt;br /&gt;
GET：是幂等的，多次请求同一资源不会改变服务器状态。&lt;br /&gt;
POST：不是幂等的，多次请求可能会导致不同的结果（如多次提交表单）。&lt;br /&gt;
缓存：&lt;br /&gt;
GET：请求可以被缓存，适合获取静态资源。&lt;br /&gt;
POST：请求不会被缓存，适合提交动态数据。&lt;br /&gt;
浏览器行为：&lt;br /&gt;
GET：请求参数会保留在浏览器历史记录中，可以被书签保存。&lt;br /&gt;
POST：请求参数不会保留在浏览器历史记录中，不能被书签保存。&lt;br /&gt;
这些区别决定了 GET 和 POST 在不同场景下的适用性。例如，GET 适用于获取数据而不改变服务器状态的操作，而 POST 适用于提交数据或改变服务器状态的操作。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;简述一个HTTP请求结构&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;一个 HTTP 请求由以下几个部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求行（Request Line）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法（Method）&lt;/strong&gt;：指定要执行的操作，如 GET、POST、PUT、DELETE 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求 URI（Request URI）&lt;/strong&gt;：请求的资源路径，通常包括主机名、端口号（如果非默认）、路径和查询字符串。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP 版本（HTTP Version）&lt;/strong&gt;：如 HTTP/1.1 或 HTTP/2。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /index.html HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求头部（Request Headers）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含了客户端环境信息、请求体的大小（如果有）、客户端支持的压缩类型等。&lt;/li&gt;
&lt;li&gt;常见的请求头包括 Host、User-Agent、Accept、Accept-Encoding、Content-Length 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host: www.example.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空行（Blank Line）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求头和请求体之间的分隔符，表示请求头的结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求体（Request Body）&lt;/strong&gt;（可选）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在某些类型的 HTTP 请求（如 POST 和 PUT）中，请求体包含要发送给服务器的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;param1=value1&amp;amp;param2=value2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个完整的 HTTP 请求示例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /index.html HTTP/1.1
Host: www.example.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个示例中，请求行指定了使用 GET 方法请求  &lt;code&gt;/index.html&lt;/code&gt;  资源，使用 HTTP/1.1 协议。请求头部包含了主机名、用户代理、接受的内容类型和编码方式等信息。由于这是一个 GET 请求，没有请求体。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;GET可以传输数据吗&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;GET 请求可以传输数据，但数据是通过 URL 参数传递的，而不是在请求体中。具体来说，GET 请求会将数据附加在 URL 的查询字符串中。例如：&lt;/p&gt;
&lt;p&gt;GET /search?q=example HTTP/1.1&lt;br /&gt;
Host: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5leGFtcGxlLmNvbQ==&#34;&gt;www.example.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，q=example 是通过 URL 参数传递的数据。&lt;/p&gt;
&lt;p&gt;需要注意的是，GET 请求有一些限制和特点：&lt;/p&gt;
&lt;p&gt;数据长度限制：由于 URL 长度有限（通常不超过 2048 个字符），GET 请求传输的数据量有限。&lt;br /&gt;
安全性：因为数据暴露在 URL 中，GET 请求不适合传输敏感信息，如密码或个人数据。&lt;br /&gt;
缓存：GET 请求可以被缓存，这对于获取静态资源非常有用。&lt;br /&gt;
幂等性：GET 请求是幂等的，多次请求同一资源不会改变服务器状态。&lt;br /&gt;
如果需要传输大量数据或敏感信息，建议使用 POST 请求，因为 POST 请求的数据包含在请求体中，不会暴露在 URL 中。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;进程与线程&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;进程和线程是操作系统中的两个重要概念，它们在计算机系统中扮演着不同的角色。&lt;/p&gt;
&lt;h3 id=&#34;进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程&#34;&gt;#&lt;/a&gt; 进程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：进程是一个正在运行的程序实例，是操作系统进行资源分配和调度的基本单位。&lt;/li&gt;
&lt;li&gt;特点：
&lt;ul&gt;
&lt;li&gt;每个进程都有独立的内存空间，包括代码段、数据段、堆和栈。&lt;/li&gt;
&lt;li&gt;进程之间相互独立，一个进程的崩溃不会影响其他进程。&lt;/li&gt;
&lt;li&gt;进程切换开销较大，因为需要保存和恢复大量的上下文信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程&#34;&gt;#&lt;/a&gt; 线程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：线程是进程中的一个执行单元，是 CPU 调度和分派的基本单位。&lt;/li&gt;
&lt;li&gt;特点：
&lt;ul&gt;
&lt;li&gt;线程共享进程的内存空间（代码段、数据段、堆），但每个线程有自己的栈和寄存器。&lt;/li&gt;
&lt;li&gt;线程之间的切换开销较小，因为共享了进程的大部分资源。&lt;/li&gt;
&lt;li&gt;一个进程可以包含多个线程，这些线程可以并发执行，提高程序的执行效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程与线程的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程与线程的区别&#34;&gt;#&lt;/a&gt; 进程与线程的区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;资源分配&lt;/strong&gt;：进程是资源分配的基本单位，而线程是 CPU 调度的基本单位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存空间&lt;/strong&gt;：进程有独立的内存空间，线程共享进程的内存空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开销&lt;/strong&gt;：进程切换开销大，线程切换开销小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;独立性&lt;/strong&gt;：进程之间相互独立，一个进程的崩溃不会影响其他进程；而线程之间相互依赖，一个线程的崩溃可能导致整个进程崩溃。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实际应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实际应用&#34;&gt;#&lt;/a&gt; 实际应用&lt;/h3&gt;
&lt;p&gt;在实际开发中，使用多线程可以提高程序的并发性和响应速度。例如，在一个 Web 服务器中，可以为每个请求创建一个线程来处理，从而提高服务器的吞吐量和响应速度。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;TCP，UDP以及IP相关知识&lt;/summary&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;TCP 和 UDP 的区别&lt;br /&gt;
考察点：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;是否了解 TCP 和 UDP 的基本特性和应用场景。&lt;br /&gt;
回答思路：&lt;/p&gt;
&lt;p&gt;连接性：TCP 是面向连接的协议，需要建立连接（通过三次握手）后才能传输数据；UDP 是无连接的协议，不需要建立连接。&lt;br /&gt;
可靠性：TCP 提供可靠的数据传输，具有确认应答、重传机制和流量控制；UDP 不保证数据的可靠性，适用于实时应用。&lt;br /&gt;
传输方式：TCP 是面向字节流的，数据按顺序传输；UDP 是面向报文的，每个报文独立传输。&lt;br /&gt;
开销：TCP 的首部较大（20 字节），UDP 的首部较小（8 字节）。&lt;br /&gt;
应用场景：TCP 适用于需要可靠传输的场景，如文件传输、邮件；UDP 适用于对速度要求高但对可靠性要求低的场景，如视频直播、在线游戏。&lt;br /&gt;
2. TCP 的可靠性机制&lt;br /&gt;
考察点：&lt;/p&gt;
&lt;p&gt;是否了解 TCP 如何保证数据传输的可靠性。&lt;br /&gt;
回答思路：&lt;/p&gt;
&lt;p&gt;校验和：用于检测数据在传输过程中是否被篡改。&lt;br /&gt;
确认应答和序列号：每个数据包都有序列号，接收方收到数据后会发送确认应答（ACK），发送方只有收到 ACK 后才会发送下一个数据包。&lt;br /&gt;
超时重传：如果发送方在一定时间内没有收到 ACK，会重传数据包。&lt;br /&gt;
流量控制：通过滑动窗口机制，控制发送方的发送速度，以适应接收方的处理能力。&lt;br /&gt;
拥塞控制：通过慢启动、拥塞避免、快速重传和快速恢复等算法，防止网络拥塞。&lt;br /&gt;
3. TCP 的三次握手和四次挥手&lt;br /&gt;
考察点：&lt;/p&gt;
&lt;p&gt;是否了解 TCP 连接的建立和关闭过程。&lt;br /&gt;
回答思路：&lt;/p&gt;
&lt;p&gt;三次握手：&lt;br /&gt;
客户端发送 SYN 报文，表示请求建立连接。&lt;br /&gt;
服务器收到 SYN 后，发送 SYN-ACK 报文，表示同意建立连接。&lt;br /&gt;
客户端收到 SYN-ACK 后，发送 ACK 报文，连接建立完成。&lt;br /&gt;
四次挥手：&lt;br /&gt;
客户端发送 FIN 报文，表示请求关闭连接。&lt;br /&gt;
服务器收到 FIN 后，发送 ACK 报文，表示同意关闭连接。&lt;br /&gt;
服务器发送 FIN 报文，表示准备关闭连接。&lt;br /&gt;
客户端收到 FIN 后，发送 ACK 报文，连接关闭完成。&lt;br /&gt;
4. IP 协议&lt;br /&gt;
考察点：&lt;/p&gt;
&lt;p&gt;是否了解 IP 协议的基本概念和功能。&lt;br /&gt;
回答思路：&lt;/p&gt;
&lt;p&gt;IP 地址：用于标识网络中的设备，每个设备都有一个唯一的 IP 地址。&lt;br /&gt;
路由：IP 协议负责将数据包从源地址传输到目标地址，通过路由器进行转发。&lt;br /&gt;
分片和重组：如果数据包超过网络的最大传输单元（MTU），IP 协议会将其分片传输，并在目标地址进行重组。&lt;br /&gt;
版本：IPv4 和 IPv6 是两种主要的 IP 协议版本，IPv6 提供了更大的地址空间和更好的安全性。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;DNS相关知识&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;DNS（Domain Name System）服务器是互联网的一项基础服务，用于将域名转换为对应的 IP 地址，使用户能够通过易记的域名访问网站，而不是复杂的数字 IP 地址。以下是 DNS 服务器的相关知识：&lt;/p&gt;
&lt;h3 id=&#34;dns-服务器的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-服务器的工作原理&#34;&gt;#&lt;/a&gt; DNS 服务器的工作原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;域名解析&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;当用户在浏览器中输入一个域名（如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5leGFtcGxlLmNvbQ==&#34;&gt;www.example.com&lt;/span&gt;）时，浏览器会向 DNS 服务器发送查询请求，询问该域名对应的 IP 地址。&lt;/li&gt;
&lt;li&gt;DNS 服务器会查找其数据库，如果找到匹配的记录，就返回对应的 IP 地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分层结构&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;DNS 采用分层结构，包括根域名服务器、顶级域名服务器（如 .com、.org）、权威域名服务器和本地域名服务器。&lt;/li&gt;
&lt;li&gt;查询请求会从本地域名服务器开始，如果本地没有缓存记录，则逐级向上查询，直到根域名服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存机制&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;为了提高查询效率，DNS 服务器会缓存查询结果。下次查询相同域名时，可以直接从缓存中获取结果，而不需要再次查询上级服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;递归查询和迭代查询&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;递归查询&lt;/strong&gt;：本地域名服务器代表用户向上级服务器查询，直到找到结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迭代查询&lt;/strong&gt;：本地域名服务器向上级服务器查询时，上级服务器只返回下一步查询的地址，由本地服务器继续查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;常见的-dns-服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的-dns-服务器&#34;&gt;#&lt;/a&gt; 常见的 DNS 服务器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;公共 DNS 服务器&lt;/strong&gt;：如 Google Public DNS（8.8.8.8）、Cloudflare DNS（1.1.1.1）、阿里云 DNS（223.5.5.5）等，提供快速、稳定的域名解析服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本地 DNS 服务器&lt;/strong&gt;：由 ISP（互联网服务提供商）或企业内部部署，用于处理本地网络的域名解析请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns-安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-安全&#34;&gt;#&lt;/a&gt; DNS 安全&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DNS 劫持&lt;/strong&gt;：攻击者通过篡改 DNS 记录，将用户引导到恶意网站。可以通过使用 DNSSEC（DNS Security Extensions）来防止。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS 缓存中毒&lt;/strong&gt;：攻击者向 DNS 服务器注入虚假记录，导致用户访问错误的 IP 地址。使用安全的 DNS 服务器和定期清理缓存可以减少风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns-在面试中的考察&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-在面试中的考察&#34;&gt;#&lt;/a&gt; DNS 在面试中的考察&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;考察点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否了解 DNS 的基本概念和工作原理。&lt;/li&gt;
&lt;li&gt;是否了解 DNS 的分层结构和查询过程。&lt;/li&gt;
&lt;li&gt;是否了解常见的 DNS 安全问题及其防护措施。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;回答思路&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简要介绍 DNS 的作用和工作原理。&lt;/li&gt;
&lt;li&gt;说明 DNS 的分层结构和查询过程。&lt;/li&gt;
&lt;li&gt;提及常见的 DNS 服务器和其用途。&lt;/li&gt;
&lt;li&gt;讨论 DNS 安全问题及其防护措施。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;mysql基本查询方法&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;code&gt;SELECT&lt;/code&gt;  语句&lt;br /&gt;
用于从数据库中检索数据。&lt;br /&gt;
-- 从表中选择所有列&lt;br /&gt;
 &lt;code&gt;SELECT * FROM table_name;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-- 从表中选择特定列&lt;br /&gt;
 &lt;code&gt;SELECT column1, column2 FROM table_name;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WHERE&lt;/code&gt;  子句&lt;br /&gt;
用于根据指定条件过滤数据。&lt;br /&gt;
-- 选择满足条件的行&lt;br /&gt;
 &lt;code&gt;SELECT * FROM table_name WHERE condition;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-- 示例：选择年龄大于 30 的用户&lt;br /&gt;
 &lt;code&gt;SELECT * FROM users WHERE age &amp;gt; 30;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ORDER BY&lt;/code&gt;  子句&lt;br /&gt;
用于对结果集进行排序。&lt;br /&gt;
-- 按照指定列升序排序&lt;br /&gt;
 &lt;code&gt;SELECT * FROM table_name ORDER BY column1 ASC;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-- 按照指定列降序排序&lt;br /&gt;
 &lt;code&gt;SELECT * FROM table_name ORDER BY column1 DESC;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LIMIT &lt;/code&gt; 子句&lt;br /&gt;
用于限制返回的行数。&lt;br /&gt;
-- 选择前 10 行&lt;br /&gt;
 &lt;code&gt;SELECT * FROM table_name LIMIT 10;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;INSERT INTO &lt;/code&gt; 语句&lt;br /&gt;
用于向表中插入新数据。&lt;br /&gt;
-- 插入一行数据&lt;br /&gt;
 &lt;code&gt;INSERT INTO table_name (column1, column2) VALUES (value1, value2);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UPDATE &lt;/code&gt; 语句&lt;br /&gt;
用于修改表中的现有数据。&lt;br /&gt;
-- 更新满足条件的行&lt;br /&gt;
 &lt;code&gt;UPDATE table_name SET column1 = value1 WHERE condition;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-- 示例：将所有用户的年龄增加 1&lt;br /&gt;
 &lt;code&gt;UPDATE users SET age = age + 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DELETE &lt;/code&gt; 语句&lt;br /&gt;
用于删除表中的数据。&lt;br /&gt;
-- 删除满足条件的行&lt;br /&gt;
 &lt;code&gt;DELETE FROM table_name WHERE condition;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-- 示例：删除年龄小于 18 的用户&lt;br /&gt;
 &lt;code&gt;DELETE FROM users WHERE age &amp;lt; 18;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GROUP BY &lt;/code&gt; 子句&lt;br /&gt;
用于将结果集中的行分组，并对每个组进行聚合操作。&lt;br /&gt;
-- 按照指定列分组&lt;br /&gt;
 &lt;code&gt;SELECT column1, COUNT(*) FROM table_name GROUP BY column1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-- 示例：按年龄分组并统计每个年龄段的用户数量&lt;br /&gt;
 &lt;code&gt;SELECT age, COUNT(*) FROM users GROUP BY age;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JOIN&lt;/code&gt;  操作&lt;br /&gt;
用于从多个表中检索数据。&lt;br /&gt;
-- 内连接&lt;br /&gt;
 &lt;code&gt;SELECT * FROM table1 INNER JOIN table2 ON table1.column = table2.column;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-- 左连接&lt;br /&gt;
 &lt;code&gt;SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-- 右连接&lt;br /&gt;
 &lt;code&gt;SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WHERE&lt;/code&gt;  与 &lt;code&gt; HAVING&lt;/code&gt;  的区别&lt;br /&gt;
 &lt;code&gt;WHERE &lt;/code&gt; 子句：在分组和聚合之前筛选记录，不能包含聚合函数。&lt;br /&gt;
 &lt;code&gt;HAVING &lt;/code&gt; 子句：在分组和聚合之后筛选记录，通常包含聚合函数。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;HashMap的底层实现&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;  是 Java 中常用的数据结构，它的底层实现主要依赖于数组和链表。在 Java 8 及之后的版本中，还引入了红黑树来优化性能。以下是  &lt;code&gt;HashMap&lt;/code&gt;  的底层实现细节：&lt;/p&gt;
&lt;h3 id=&#34;1-数据存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-数据存储结构&#34;&gt;#&lt;/a&gt; 1. 数据存储结构&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;  使用一个数组来存储数据，每个数组元素称为一个 “桶”（bucket）。每个桶中存储的是一个链表或红黑树的头节点。&lt;/p&gt;
&lt;h3 id=&#34;2-哈希函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-哈希函数&#34;&gt;#&lt;/a&gt; 2. 哈希函数&lt;/h3&gt;
&lt;p&gt;当我们向  &lt;code&gt;HashMap&lt;/code&gt;  中插入一个键值对时，首先会对键进行哈希运算，得到一个哈希值。然后通过哈希值计算出该键值对应该存储在数组中的哪个位置（即哪个桶中）。计算位置的公式通常是  &lt;code&gt;index = hash % array.length&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;3-解决哈希冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-解决哈希冲突&#34;&gt;#&lt;/a&gt; 3. 解决哈希冲突&lt;/h3&gt;
&lt;p&gt;哈希冲突是指不同的键经过哈希运算后得到相同的数组索引。 &lt;code&gt;HashMap&lt;/code&gt;  通过链表和红黑树来解决哈希冲突：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;链表&lt;/strong&gt;：在 Java 8 之前，当发生哈希冲突时， &lt;code&gt;HashMap&lt;/code&gt;  会将冲突的键值对存储在同一个桶中的链表中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;红黑树&lt;/strong&gt;：在 Java 8 及之后的版本中，当链表长度超过一定阈值（默认是 8）时，链表会转换为红黑树，以提高查询效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-扩容机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-扩容机制&#34;&gt;#&lt;/a&gt; 4. 扩容机制&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;  有一个负载因子（默认是 0.75），当  &lt;code&gt;HashMap&lt;/code&gt;  中的元素数量超过  &lt;code&gt;容量 * 负载因子&lt;/code&gt;  时， &lt;code&gt;HashMap&lt;/code&gt;  会进行扩容。扩容时， &lt;code&gt;HashMap&lt;/code&gt;  会创建一个新的、更大的数组，并将原数组中的所有元素重新哈希并放入新数组中。&lt;/p&gt;
&lt;h3 id=&#34;5-主要方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-主要方法&#34;&gt;#&lt;/a&gt; 5. 主要方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;put(K key, V value)&lt;/code&gt; ：将键值对插入  &lt;code&gt;HashMap&lt;/code&gt;  中。如果键已经存在，则更新对应的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get(Object key)&lt;/code&gt; ：根据键获取对应的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove(Object key)&lt;/code&gt; ：根据键移除对应的键值对。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;containsKey(Object key)&lt;/code&gt; ：判断  &lt;code&gt;HashMap&lt;/code&gt;  中是否包含指定的键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-示例代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-示例代码&#34;&gt;#&lt;/a&gt; 6. 示例代码&lt;/h3&gt;
&lt;p&gt;以下是  &lt;code&gt;HashMap&lt;/code&gt;  中节点的实现示例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Entry&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; hash&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;K&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; next&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; hash&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;K&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; next&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hash &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; hash&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;next &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; next&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; key &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;=&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; newValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; oldValue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; newValue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; oldValue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;o &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;o &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Entry&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Entry&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; e &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Entry&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;o&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;虚拟内存技术&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;虚拟内存是计算机系统中的一种内存管理技术，它使得应用程序可以使用比实际物理内存更大的内存空间。虚拟内存通过将物理内存和磁盘存储结合起来，为每个进程提供一个独立的、连续的地址空间。以下是虚拟内存的主要概念和工作原理：&lt;/p&gt;
&lt;h3 id=&#34;1-基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-基本概念&#34;&gt;#&lt;/a&gt; 1. 基本概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;虚拟地址空间&lt;/strong&gt;：每个进程都有一个独立的虚拟地址空间，这个地址空间是连续的，并且对进程来说是唯一的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理内存&lt;/strong&gt;：实际存在的内存硬件，通常是 RAM（随机存取存储器）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;页面（Page）&lt;/strong&gt;：虚拟内存和物理内存都被划分成固定大小的块，称为页面。常见的页面大小是 4KB。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;页表（Page Table）&lt;/strong&gt;：操作系统维护的一个数据结构，用于映射虚拟地址到物理地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-工作原理&#34;&gt;#&lt;/a&gt; 2. 工作原理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;地址转换&lt;/strong&gt;：当进程访问内存时，CPU 会将虚拟地址转换为物理地址。这个转换过程由内存管理单元（MMU）完成，MMU 使用页表来查找对应的物理地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;页面置换&lt;/strong&gt;：当物理内存不足时，操作系统会将不常用的页面暂时存储到磁盘上（称为交换空间或页面文件），并将需要的页面加载到物理内存中。这种过程称为页面置换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺页中断&lt;/strong&gt;：当进程访问的页面不在物理内存中时，会触发缺页中断。操作系统会处理这个中断，将所需页面从磁盘加载到内存中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-优点&#34;&gt;#&lt;/a&gt; 3. 优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;扩展内存容量&lt;/strong&gt;：虚拟内存使得应用程序可以使用比实际物理内存更大的内存空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存保护&lt;/strong&gt;：每个进程都有独立的虚拟地址空间，防止进程之间的内存访问冲突，提高系统稳定性和安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存管理灵活性&lt;/strong&gt;：操作系统可以更灵活地管理内存，优化内存使用效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-示例&#34;&gt;#&lt;/a&gt; 4. 示例&lt;/h3&gt;
&lt;p&gt;假设一个系统有 4GB 的物理内存，但通过虚拟内存技术，可以让每个进程使用高达 16GB 的虚拟内存。当一个进程需要访问超过物理内存容量的数据时，操作系统会将不常用的数据页面存储到磁盘上，并将需要的数据页面加载到物理内存中。&lt;/p&gt;
&lt;h3 id=&#34;5-实际应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-实际应用&#34;&gt;#&lt;/a&gt; 5. 实际应用&lt;/h3&gt;
&lt;p&gt;虚拟内存广泛应用于现代操作系统中，如 Windows、Linux 和 macOS。它使得系统能够运行大型应用程序，并提高系统的稳定性和安全性。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;单例模式&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;单例模式（Singleton Pattern）是一种创建型设计模式，确保一个类只有一个实例，并提供一个全局访问点。以下是几种常见的单例模式实现方法：&lt;/p&gt;
&lt;h3 id=&#34;1-饿汉式eager-initialization&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-饿汉式eager-initialization&#34;&gt;#&lt;/a&gt; 1. 饿汉式（Eager Initialization）&lt;/h3&gt;
&lt;p&gt;在类加载时就创建实例，线程安全，但可能会造成资源浪费。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; instance &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 私有构造函数，防止外部实例化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; instance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2-懒汉式lazy-initialization&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-懒汉式lazy-initialization&#34;&gt;#&lt;/a&gt; 2. 懒汉式（Lazy Initialization）&lt;/h3&gt;
&lt;p&gt;在需要时才创建实例，非线程安全。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; instance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 私有构造函数，防止外部实例化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;instance &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            instance &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; instance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;3-线程安全的懒汉式thread-safe-lazy-initialization&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-线程安全的懒汉式thread-safe-lazy-initialization&#34;&gt;#&lt;/a&gt; 3. 线程安全的懒汉式（Thread-Safe Lazy Initialization）&lt;/h3&gt;
&lt;p&gt;使用同步方法确保线程安全，但性能较低。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; instance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 私有构造函数，防止外部实例化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;instance &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            instance &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; instance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;4-双重检查锁定double-checked-locking&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-双重检查锁定double-checked-locking&#34;&gt;#&lt;/a&gt; 4. 双重检查锁定（Double-Checked Locking）&lt;/h3&gt;
&lt;p&gt;结合了懒汉式和同步方法的优点，性能较好。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; instance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 私有构造函数，防止外部实例化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;instance &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;instance &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    instance &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; instance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;5-静态内部类bill-pugh-singleton&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-静态内部类bill-pugh-singleton&#34;&gt;#&lt;/a&gt; 5. 静态内部类（Bill Pugh Singleton）&lt;/h3&gt;
&lt;p&gt;利用静态内部类的特性，既实现了延迟加载，又保证了线程安全。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 私有构造函数，防止外部实例化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SingletonHelper&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;INSTANCE&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SingletonHelper&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;INSTANCE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;6-枚举enum-singleton&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-枚举enum-singleton&#34;&gt;#&lt;/a&gt; 6. 枚举（Enum Singleton）&lt;/h3&gt;
&lt;p&gt;枚举类型是实现单例模式的最佳方法，天然支持序列化和线程安全。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token constant&#34;&gt;INSTANCE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;someMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 单例方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/details&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/ES%E6%90%9C%E7%B4%A2%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
            <title>ES搜索的使用</title>
            <link>https://kagurazakaasahi.github.io/ES%E6%90%9C%E7%B4%A2%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <pubDate>Thu, 15 Aug 2024 13:30:00 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;在实习过程中，有一个故事单需要完成，具体为将当前项目的全局搜索由只能搜索一个关键词改为能搜索用空格分隔的多个关键词。&lt;/p&gt;
&lt;p&gt;经阅读代码，该项目实现搜索是由 &lt;code&gt;Elastic Search&lt;/code&gt;  简称 &lt;code&gt;ES&lt;/code&gt;  的中间层完成的。&lt;/p&gt;
&lt;h2 id=&#34;什么是es&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是es&#34;&gt;#&lt;/a&gt; 什么是 ES&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Elasticsearch &lt;/code&gt; 是一个基于 &lt;code&gt;Lucene&lt;/code&gt;  的开源搜索引擎，具有高扩展性和分布式特性。它可以实时地存储、搜索和分析大量数据。&lt;/p&gt;
&lt;p&gt;主要特点&lt;br /&gt;
分布式： &lt;code&gt;Elasticsearch&lt;/code&gt;  可以扩展到上百台服务器，处理 PB 级别的数据。&lt;br /&gt;
高可用性：通过分片和副本机制，确保数据的高可用性和容错性。&lt;br /&gt;
近实时搜索：数据更新几乎是实时的，适用于需要快速响应的应用场景。&lt;br /&gt;
多种 API：提供  &lt;code&gt;RESTful API&lt;/code&gt; ，便于集成和使用。&lt;br /&gt;
使用场景&lt;br /&gt;
全文搜索：适用于网站搜索、日志分析等需要快速检索的场景。&lt;br /&gt;
数据分析：结合  &lt;code&gt;Kibana&lt;/code&gt; ，可以进行数据的可视化分析。&lt;br /&gt;
日志和事件数据处理：与  &lt;code&gt;Logstash &lt;/code&gt; 配合， &lt;code&gt;形成 ELK（Elasticsearch, Logstash, Kibana）&lt;/code&gt; 技术栈，用于日志和事件数据的收集、处理和分析。&lt;/p&gt;
&lt;h2 id=&#34;如何使用es&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用es&#34;&gt;#&lt;/a&gt; 如何使用 ES&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ES&lt;/code&gt;  对外提供 &lt;code&gt;http&lt;/code&gt;  接口，故所有语言均可使用。&lt;/p&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意事项&#34;&gt;#&lt;/a&gt; 注意事项&lt;/h2&gt;
&lt;p&gt;由于 &lt;code&gt;ES&lt;/code&gt;  搜索语句为 &lt;code&gt;JSON&lt;/code&gt;  格式 (这种格式被称为 &lt;code&gt; Query DSL（Domain Specific Language）&lt;/code&gt; ，它使用  &lt;code&gt;JSON&lt;/code&gt;  来构建查询请求), 因此，如果在手动使用 &lt;code&gt;StringBuilder&lt;/code&gt;  来构建 ES 语句，那么极大可能会出现遗漏逗号，闭括号的问题。这里推荐使用 &lt;code&gt;notepad++&lt;/code&gt;  的插件进行 &lt;code&gt;JS&lt;/code&gt;  格式化检查是否存在遗漏&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/ES%E6%90%9C%E7%B4%A2%E7%9A%84%E4%BD%BF%E7%94%A8/image-20240831123931994.png&#34; class=&#34;&#34; title=&#34;image-20240831123931994&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考资料&#34;&gt;#&lt;/a&gt; 参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9lbGFzdGljc2VhcmNo&#34;&gt;Elasticsearch：官方分布式搜索和分析引擎 | Elastic&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1OTg5MTU2L2FydGljbGUvZGV0YWlscy8xMDc4MjY3NTI=&#34;&gt;ES（Elasticsearch）全文搜索引擎 (最全) 入门基本语法与在 SpringBoot 中的实战_springboot es 搜索语法 - CSDN 博客&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXliNDIxSjdvWC8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT1mMTNjMDYxMWE0NzliYmQ0ZjlkMzM3NTBhNmZiZjdmZA==&#34;&gt;Elastic Search 是什么？Lucene 是什么？架构是怎么样的？_哔哩哔哩_bilibili&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
            <title>单元测试</title>
            <link>https://kagurazakaasahi.github.io/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <pubDate>Thu, 01 Aug 2024 04:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;p&gt;在实习过程中，首先要熟悉所在组所做的项目，而单元测试就是一个比较好的方法。&lt;/p&gt;
&lt;h2 id=&#34;什么是单元测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是单元测试&#34;&gt;#&lt;/a&gt; 什么是单元测试&lt;/h2&gt;
&lt;p&gt;单元测试（ &lt;code&gt;Unit Testing&lt;/code&gt; ）是软件开发中的一种测试方法，旨在验证代码中最小可测试单元（通常是函数、方法或类）的正确性。它的主要目的是确保每个单元在各种情况下都能按预期工作，从而及早发现和纠正错误。&lt;/p&gt;
&lt;h3 id=&#34;单元测试的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元测试的特点&#34;&gt;#&lt;/a&gt; 单元测试的特点&lt;/h3&gt;
&lt;p&gt;独立性：单元测试通常是独立的，不依赖于其他部分的代码。&lt;br /&gt;
自动化：单元测试可以通过自动化工具运行，减少人为错误。&lt;br /&gt;
快速反馈：由于测试范围小，单元测试能够快速提供反馈，帮助开发者及时修复问题。&lt;/p&gt;
&lt;h3 id=&#34;单元测试的优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元测试的优点&#34;&gt;#&lt;/a&gt; 单元测试的优点&lt;/h3&gt;
&lt;p&gt;提高代码质量：通过早期发现和修复错误，单元测试可以显著提高代码质量。&lt;br /&gt;
简化调试：由于测试范围小，定位和修复错误变得更加容易。&lt;br /&gt;
文档作用：单元测试代码可以作为文档，帮助其他开发者理解代码的功能和使用方法。&lt;/p&gt;
&lt;h2 id=&#34;如何进行单元测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何进行单元测试&#34;&gt;#&lt;/a&gt; 如何进行单元测试&lt;/h2&gt;
&lt;h3 id=&#34;使用squaretest插件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用squaretest插件&#34;&gt;#&lt;/a&gt; 使用 squareTest 插件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装插件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到要生成的类，点击 &lt;code&gt;generate Test&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更换给定的模板为以下文件中内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;补充必备代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Public Class xxx extends NecpBaseContextTest&lt;/code&gt;  首先继承这个类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加以下静态代码块：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;static &amp;#123;
    (new SqlResource()).handleEvent(Database.MYSQL, null);
    (new SqlResource()).handleEvent(Database.ORACLE, null);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意事项&lt;br /&gt;
 &lt;code&gt;tearDown() &lt;/code&gt; 方法相当于回收垃圾的作用，其中 &lt;code&gt; reset&lt;/code&gt;  方法参数只放被 &lt;code&gt;@Mock&lt;/code&gt;  注解的对象， &lt;code&gt;@InjectMock&lt;/code&gt;  不需要，如果整个测试类没有 &lt;code&gt;@Mock&lt;/code&gt;  注解的对象，那么就不需要编写 &lt;code&gt;tearDown()&lt;/code&gt;  方法。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Mock&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArchivesCsRepository&lt;/span&gt; mockArchivesCsRepository&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@After&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tearDown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mockArchivesCsRepository&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mockito框架用法要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mockito框架用法要点&#34;&gt;#&lt;/a&gt; Mockito 框架用法要点&lt;/h3&gt;
&lt;h4 id=&#34;参数匹配和打桩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数匹配和打桩&#34;&gt;#&lt;/a&gt; 参数匹配和打桩&lt;/h4&gt;
&lt;p&gt;前言：&lt;br /&gt;
当你在测试中设置 &lt;code&gt;mock&lt;/code&gt;  对象的行为（即打桩，使用 &lt;code&gt;when(...).thenReturn(...)&lt;/code&gt;  等语句），你指定了当特定方法被特定参数调用时应该返回什么。&lt;br /&gt;
如果在实际执行测试时传递的参数与你设置的参数不匹配，那么打桩的行为将不会发生， &lt;code&gt;mock &lt;/code&gt; 对象将返回默认值（如 &lt;code&gt; null&lt;/code&gt; 、 &lt;code&gt;0 &lt;/code&gt; 或  &lt;code&gt;false &lt;/code&gt; 等）。&lt;/p&gt;
&lt;p&gt;例如：&lt;br /&gt;
--- 被测试方法片段 ---&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; sql &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;ARCH_QUERY_DOCNO_SQL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sql &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MessageFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sql&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; tableName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; param &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ArchMoveBO&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; moveQueryService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;findListByParam&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sql&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; param &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArchMoveBO&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;T000001&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;---- 错误的测试方法片段 ----&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ArchMoveBO&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; archMoveBOS &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;archMoveBO&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;queryService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;findListByParam&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sql&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;newHashMap&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; archMoveBO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;archMoveBOS&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; archivesMoveQueryServiceUnderTest&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getNextProcessInstId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;year&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行结果： 被测方法返回的 result 为 null，这就说明测试方法打桩失效了。&lt;br /&gt;
---- 正确的测试方法片段 ----&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ArchMoveBO&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; archMoveBOS &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;archMoveBO&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;queryService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;findListByParam&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;anyMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;archMoveBOS&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; archivesMoveQueryServiceUnderTest&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getNextProcessInstId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;year&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行结果： 被测方法返回的 &lt;code&gt;result&lt;/code&gt;  为 &lt;code&gt;archMoveBOS&lt;/code&gt; ，这就说明测试方法打桩成功了。&lt;/p&gt;
&lt;p&gt;结论： 当使用 &lt;code&gt;mock&lt;/code&gt;  来 &lt;code&gt;mock&lt;/code&gt;  方法的时候，一定要注意参数匹配， 否则打桩不成功。&lt;/p&gt;
&lt;p&gt;补充： 在使用参数任意匹配符时，也要注意匹配，有的时候 &lt;code&gt;Any()&lt;/code&gt;  可以成功，但是有的时候需要具体匹配，比如使用 &lt;code&gt;anyString()&lt;/code&gt; ;&lt;/p&gt;
&lt;h4 id=&#34;如何测试private方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何测试private方法&#34;&gt;#&lt;/a&gt; 如何测试 private 方法？&lt;/h4&gt;
&lt;p&gt;(1) 使用这个方法 &lt;code&gt;Whitebox.invokeMethod()&lt;/code&gt;  调用私有方法即可。&lt;br /&gt;
例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Whitebox&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;invokeMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;archivesPrintQueryService&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;isPrintEleOrOther&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nodeTypeCodeMap&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; isVoucher&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意点：&lt;br /&gt;
(1) 使用 &lt;code&gt;Whitebox&lt;/code&gt;  调用私有方法时不能 &lt;code&gt;debug&lt;/code&gt;  调试。&lt;br /&gt;
(2) 一定要注意方法的返回值，如果返回值不对应就会报错，但是这个错是运行时的错误，不会在编译的时候爆出来，一旦出错难以找出，一定要小心。&lt;br /&gt;
在 &lt;code&gt;Java&lt;/code&gt;  中， &lt;code&gt;Whitebox&lt;/code&gt;  类通常来自于 &lt;code&gt;org.jmockit.whitebox&lt;/code&gt;  包，它是 &lt;code&gt;Mockit&lt;/code&gt;  框架的一部分，用于测试时访问私有方法。 &lt;code&gt;Whitebox.invokeMethod()&lt;/code&gt;  方法用于调用一个类的私有方法，即使这些方法不是公开的，也可以通过反射机制来访问它们。&lt;br /&gt;
下面是 &lt;code&gt;Whitebox.invokeMethod()&lt;/code&gt;  方法的签名：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;invokeMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; methodName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; parameterTypes&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; parameters&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;archivesPrintQueryService&lt;/code&gt; : 这是你要调用私有方法的对象实例。在这个例子中，它是一个实现了 &lt;code&gt;archivesPrintQueryService&lt;/code&gt;  接口或类的实例。&lt;br /&gt;
&amp;quot; &lt;code&gt;isPrintEleOrOther&lt;/code&gt; &amp;quot;: 这是你要调用的私有方法的名称。在这个字符串中，方法名是 &lt;code&gt;isPrintEleOrOther&lt;/code&gt; ，注意，方法名不需要加任何修饰符，即使是私有方法。&lt;br /&gt;
 &lt;code&gt;nodeTypeCodeMap&lt;/code&gt; : 这是第一个参数传递给 &lt;code&gt;isPrintEleOrOther&lt;/code&gt;  方法的值。 &lt;code&gt;nodeTypeCodeMap&lt;/code&gt;  通常是一个映射（如 &lt;code&gt;HashMap&lt;/code&gt;  或 &lt;code&gt;Map&lt;/code&gt; ），它包含了节点类型代码和其它相关数据的键值对。&lt;br /&gt;
 &lt;code&gt;isVoucher&lt;/code&gt; : 这是第二个参数传递给 &lt;code&gt;isPrintEleOrOther&lt;/code&gt;  方法的值。这个参数通常是布尔值，表示是否是凭证（ &lt;code&gt;isVoucher&lt;/code&gt;  为 &lt;code&gt;true&lt;/code&gt;  表示是凭证，为 false 表示不是）。&lt;br /&gt;
下面是如何使用 &lt;code&gt;Whitebox.invokeMethod()&lt;/code&gt;  调用的详细步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;archivesPrintQueryService&lt;/code&gt;  对象是一个包含私有方法 &lt;code&gt;isPrintEleOrOther&lt;/code&gt;  的类的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Whitebox.invokeMethod()&lt;/code&gt;  被用来调用这个实例的私有方法 &lt;code&gt;isPrintEleOrOther&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeTypeCodeMap&lt;/code&gt;  和 &lt;code&gt;isVoucher&lt;/code&gt;  作为参数传递给这个私有方法。&lt;/li&gt;
&lt;li&gt;私有方法 &lt;code&gt;isPrintEleOrOther&lt;/code&gt;  执行其逻辑，可能基于传入的参数。&lt;/li&gt;
&lt;li&gt;执行结果是一个 &lt;code&gt;boolean[]&lt;/code&gt;  数组，这个数组被赋值给 &lt;code&gt;result&lt;/code&gt;  变量。&lt;/li&gt;
&lt;li&gt;总结一下， &lt;code&gt;Whitebox.invokeMethod()&lt;/code&gt;  调用了 &lt;code&gt;archivesPrintQueryService&lt;/code&gt;  对象的私有方法 &lt;code&gt;isPrintEleOrOther&lt;/code&gt; ，并传递了两个参数 &lt;code&gt;nodeTypeCodeMap&lt;/code&gt;  和 &lt;code&gt;isVoucher&lt;/code&gt; ，然后返回了一个 &lt;code&gt;boolean[]&lt;/code&gt;  类型的值，这个值被存储在 &lt;code&gt;result&lt;/code&gt;  变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何测试static方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何测试static方法&#34;&gt;#&lt;/a&gt; 如何测试 static 方法&lt;/h4&gt;
&lt;p&gt;(1) 添加 &lt;code&gt;@PrepareForTest(Class.class)&lt;/code&gt;  注解&lt;br /&gt;
 (2) 模拟 &lt;code&gt;static&lt;/code&gt;  方法：  &lt;code&gt;PowerMockito.mockStatic(ClassWithstaticMethod.class)&lt;/code&gt; &lt;br /&gt;
(3) 定义 &lt;code&gt;static&lt;/code&gt;  方法的行为：  &lt;code&gt;when().thenReturn()&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;注意点：如果出现问题，比如 not prepared for test.&lt;br /&gt;
 可能是 &lt;code&gt;PowerMockito&lt;/code&gt;  和 &lt;code&gt;Mockito&lt;/code&gt;  版本兼容性问题。&lt;/p&gt;
&lt;h4 id=&#34;如何mock被测试类的方法中调用的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何mock被测试类的方法中调用的方法&#34;&gt;#&lt;/a&gt; 如何 Mock 被测试类的方法中调用的方法&lt;/h4&gt;
&lt;p&gt;无需 &lt;code&gt;mock&lt;/code&gt; ，直接陷入调用的方法即可。&lt;/p&gt;
&lt;h4 id=&#34;如何设置待测方法的属性值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何设置待测方法的属性值&#34;&gt;#&lt;/a&gt; 如何设置待测方法的属性值&lt;/h4&gt;
&lt;p&gt;例如： &lt;code&gt; @Value(&amp;quot;$&amp;#123;formatFileTagLimit:10000&amp;#125;&amp;quot;)&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;private Integer formatFileTagLimit;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决： 我们可以通过反射来进行属性注入。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Before&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ReflectionTestUtils&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setField&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;archFormatFileTagServiceUnderTest&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;formatFileTagLimit&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;thisgetdao为null的解决办法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#thisgetdao为null的解决办法&#34;&gt;#&lt;/a&gt; this.getDao () 为 NULL 的解决办法&lt;/h4&gt;
&lt;p&gt;以 &lt;code&gt;ArchivesDepotQueryServiceTest &lt;/code&gt; 类为例子：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@InjectMocks&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArchivesDepotQueryService&lt;/span&gt; service&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Mock&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArchivesDepotRepository&lt;/span&gt; repository&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Before&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;MockitoAnnotations&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;initMocks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Field&lt;/span&gt; daoField &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GeneralContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;dao&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;daoField&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setAccessible&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;daoField&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;service&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; repository&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解释（通义灵码生成）：&lt;br /&gt;
这段标红代码的作用是通过反射机制，修改 &lt;code&gt;GeneralContext&lt;/code&gt;  类中 &lt;code&gt;dao&lt;/code&gt;  字段的值为 &lt;code&gt;repository&lt;/code&gt; 。具体步骤如下：&lt;br /&gt;
(1) 使用 &lt;code&gt;getDeclaredField&lt;/code&gt;  方法获取 &lt;code&gt;GeneralContext&lt;/code&gt;  类中名为 &lt;code&gt;dao&lt;/code&gt;  的私有字段；&lt;br /&gt;
(2) 调用 &lt;code&gt;setAccessible&lt;/code&gt;  方法将该字段的访问权限设置为可访问；&lt;br /&gt;
(3) 使用 &lt;code&gt;set&lt;/code&gt;  方法将 &lt;code&gt;dao&lt;/code&gt;  字段的值设置为 &lt;code&gt;repository&lt;/code&gt; ，并将 &lt;code&gt;service&lt;/code&gt;  对象作为参数传入，表示要修改的是 &lt;code&gt;service&lt;/code&gt;  对象中的 &lt;code&gt;dao&lt;/code&gt;  字段值。&lt;/p&gt;
&lt;h4 id=&#34;如何解决微服务调用的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决微服务调用的问题&#34;&gt;#&lt;/a&gt; 如何解决微服务调用的问题&lt;/h4&gt;
&lt;p&gt;以 &lt;code&gt;ArchivesAttachServiceTest&lt;/code&gt;  类为例：&lt;br /&gt;
步骤：&lt;br /&gt;
(1) 加入 &lt;code&gt;@PrepareForTest(&amp;#123;MappService.class&amp;#125;)&lt;/code&gt; &lt;br /&gt;
(2) 对 &lt;code&gt;MapperService&lt;/code&gt;  进行 &lt;code&gt;mock&lt;/code&gt;  注入&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Mock&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;MappService&lt;/span&gt; mappService&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;(3) 在 &lt;code&gt;setUp()&lt;/code&gt;  方法中添加如下代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Before&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Whitebox&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setInternalState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MappService&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;INSTANCE&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mappService&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MappService&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;INSTANCE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;doPost&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;anyString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;anyMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;eq&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;anyObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;缺陷：&lt;br /&gt;
虽然 &lt;code&gt;mock&lt;/code&gt;  成功，不会报错，但是不能设定返回值， &lt;code&gt;eturn&lt;/code&gt;  为”” 空的。&lt;/p&gt;
&lt;h4 id=&#34;解决dbutilisoracle-报错的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决dbutilisoracle-报错的方式&#34;&gt;#&lt;/a&gt; 解决 DBUtil.isOracle () 报错的方式&lt;/h4&gt;
&lt;p&gt;（1） 在 &lt;code&gt;@PrepareForTest(DBUtil.class)&lt;/code&gt;  中添加 &lt;code&gt;DBUtil.class&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（2）在相应的方法中添加这两句即可&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;PowerMockito&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mockStatic&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;DBUtil&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;PowerMockito&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;DBUtil&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isOracle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;thenReturn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;解决静态常量为空的情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决静态常量为空的情况&#34;&gt;#&lt;/a&gt; 解决静态常量为空的情况&lt;/h4&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;PowerMockito&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mockStatic&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SQLConst&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Field&lt;/span&gt; field &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PowerMockito&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SQLConst&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;QYVO_STA_MITEM_SY_MCOM_SITEM&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;field&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your_sql_query_here&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;让某个方法什么也不做从而跳过该方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#让某个方法什么也不做从而跳过该方法&#34;&gt;#&lt;/a&gt; 让某个方法什么也不做，从而跳过该方法&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;doNothing&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;spy&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;saveList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;anyList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;已知会抛出某个异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#已知会抛出某个异常&#34;&gt;#&lt;/a&gt; 已知会抛出某个异常.&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;junit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;jupiter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;api&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Test&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token import static&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;junit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;jupiter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;api&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Assertions&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token static&#34;&gt;assertThrows&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; exception &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;assertThrows&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 在这里调用可能抛出 NullPointerException 的方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;CommentSaveStatusEnum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;使用when来抛出异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用when来抛出异常&#34;&gt;#&lt;/a&gt; 使用 when 来抛出异常&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mockSystemParamContext&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;findByNameAndTenantGid&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;anyString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;anyString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;thenThrow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error fetching parameter&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--JVM/</guid>
            <title>八股文概要--JVM</title>
            <link>https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--JVM/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <category term="JAVA八股文" scheme="https://kagurazakaasahi.github.io/categories/study/JAVA%E5%85%AB%E8%82%A1%E6%96%87/" />
            <pubDate>Sat, 13 Apr 2024 15:00:31 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;java继承时父子类的初始化顺序是怎样的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java继承时父子类的初始化顺序是怎样的&#34;&gt;#&lt;/a&gt; JAVA 继承时父子类的初始化顺序是怎样的&lt;/h2&gt;
&lt;p&gt;具体顺序如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;父类 -- 静态变量&lt;/li&gt;
&lt;li&gt;父类 -- 静态初始化块&lt;/li&gt;
&lt;li&gt;子类 -- 静态变量&lt;/li&gt;
&lt;li&gt;子类 -- 静态初始化块&lt;/li&gt;
&lt;li&gt;父类 -- 变量&lt;/li&gt;
&lt;li&gt;父类 -- 初始化块&lt;/li&gt;
&lt;li&gt;父类 -- 构造器&lt;/li&gt;
&lt;li&gt;子类 -- 变量&lt;/li&gt;
&lt;li&gt;子类 -- 初始化块&lt;/li&gt;
&lt;li&gt;子类 -- 构造器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结如下：静态优于非静态，父类优于子类，变量优于初始化块优于构造器&lt;/p&gt;
&lt;h2 id=&#34;jvm的双亲委派模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jvm的双亲委派模型&#34;&gt;#&lt;/a&gt; JVM 的双亲委派模型&lt;/h2&gt;
&lt;p&gt;为什么设计，有何好处&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保安全，避免 JAVA 核心类库被修改&lt;/li&gt;
&lt;li&gt;避免重复加载&lt;/li&gt;
&lt;li&gt;保证类的唯一性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以打破双亲委派模型吗？如何打破？&lt;/p&gt;
&lt;p&gt;可以。自定义一个类加载器，重写其中的 &lt;code&gt;loadClass&lt;/code&gt;  方法，使其不进行双亲委派即可&lt;/p&gt;
&lt;h2 id=&#34;什么是内存溢出什么是内存泄露&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是内存溢出什么是内存泄露&#34;&gt;#&lt;/a&gt; 什么是内存溢出，什么是内存泄露&lt;/h2&gt;
&lt;p&gt;内存溢出：指程序申请内存时，没有足够的内存空间供其使用，抛出 &lt;code&gt;OutOfMemory&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;内存泄露：指程序运行后，没有释放所占用的内存空间，一次泄露没有太大问题，长时间内存泄露会导致可用内存减少，最终导致内存溢出&lt;/p&gt;
&lt;h2 id=&#34;线上项目jvm怎么设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线上项目jvm怎么设置&#34;&gt;#&lt;/a&gt; 线上项目 JVM 怎么设置&lt;/h2&gt;
&lt;p&gt;假设线上 4 核 8G 机器&lt;/p&gt;
&lt;p&gt;JVM: 栈，堆，元空间&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;栈：1m,-xss512k (改为 512k), 一个线程是 1m, 一个线上项目 Tomcat 可能有 300 个线程，300m;&lt;/li&gt;
&lt;li&gt;堆：大概把机器一半的内存给堆 (新生代，老年代)&lt;/li&gt;
&lt;li&gt;元空间：一般 512M 够用&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--Thread/</guid>
            <title>八股文概要--Thread</title>
            <link>https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--Thread/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <category term="JAVA八股文" scheme="https://kagurazakaasahi.github.io/categories/study/JAVA%E5%85%AB%E8%82%A1%E6%96%87/" />
            <pubDate>Sat, 13 Apr 2024 14:50:32 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;threadlocal底层如何实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#threadlocal底层如何实现&#34;&gt;#&lt;/a&gt; ThreadLocal 底层如何实现&lt;/h2&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;h2 id=&#34;threadlocal为什么会内存泄露&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#threadlocal为什么会内存泄露&#34;&gt;#&lt;/a&gt; ThreadLocal 为什么会内存泄露&lt;/h2&gt;
&lt;p&gt;ThreadLocal 是一个类似 HashMap 的数据结构&lt;/p&gt;
&lt;p&gt;ThreadLocal 的实现原理就是通过 set 把 value set 到线程的 threadlocals 属性中，threadlocals 是一个 Map, 其中 key 是 ThreadLocal 的 this 引用，value 是我们 set 的值&lt;/p&gt;
&lt;h2 id=&#34;sleep和wait有何区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sleep和wait有何区别&#34;&gt;#&lt;/a&gt; sleep () 和 wait () 有何区别&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;sleep()&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;wait()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所属类不同&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Thread&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;方法类型不同&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;静态方法&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;实例方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr t.wait(time)=&#34;&#34;&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用语法不同&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;thread.sleep(time)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;得先拿到锁 synchronize (t)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;唤醒方式不同&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;必须传时间 time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;t.notify&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;释放锁资源不同&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不释放锁资源 (单纯为了让线程等待)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;释放锁资源 (协调线程同步)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;线程状态不同&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;TIMED_WAITTING&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;WAITTING&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;多个线程如何保证按顺序执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多个线程如何保证按顺序执行&#34;&gt;#&lt;/a&gt; 多个线程如何保证按顺序执行&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过 join () 方法使当前线程 &amp;quot;阻塞&amp;quot;, 等待指定线程执行完毕后继续执行；&lt;/li&gt;
&lt;li&gt;通过创建单一化线程池 newSingleThreadExecutor () 实现&lt;/li&gt;
&lt;li&gt;通过倒数计时器 CountDownLatch 实现&lt;/li&gt;
&lt;li&gt;使用 Object 的 wait/notify 方法实现&lt;/li&gt;
&lt;li&gt;使用线程的 Condition (条件变量) 方法实现&lt;/li&gt;
&lt;li&gt;使用线程的 CyclicBarrier (回环栅栏) 方法实现&lt;/li&gt;
&lt;li&gt;使用线程的 Semaphore (信号量) 方法实现&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;java线程池中submit和execute方法有何区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java线程池中submit和execute方法有何区别&#34;&gt;#&lt;/a&gt; JAVA 线程池中 submit () 和 execute () 方法有何区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;两个方法都可以向线程池中提交任务&lt;/li&gt;
&lt;li&gt;execute 只能提交 Runnable, 无返回值&lt;/li&gt;
&lt;li&gt;submit 既可以提交 Runnable, 返回值为 null, 也可以提交 Callable, 返回值 Future&lt;/li&gt;
&lt;li&gt;execute () 方法定义在 Executor 接口中&lt;/li&gt;
&lt;li&gt;submit () 方法定义在 ExecutorService 接口中&lt;/li&gt;
&lt;li&gt;execute 执行任务遇到异常会直接抛出&lt;/li&gt;
&lt;li&gt;submit 执行任务时遇到异常不会直接抛出，只有调用 Future 的 get () 方法获取返回值时，才会抛出异常&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--HashMap/</guid>
            <title>八股文概要--HashMap</title>
            <link>https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--HashMap/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <category term="JAVA八股文" scheme="https://kagurazakaasahi.github.io/categories/study/JAVA%E5%85%AB%E8%82%A1%E6%96%87/" />
            <pubDate>Sat, 13 Apr 2024 13:47:23 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;hashmap底层如何实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hashmap底层如何实现&#34;&gt;#&lt;/a&gt; HashMap 底层如何实现&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CKagurazakaAsahi%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240413214834288.png&#34; alt=&#34;image-20240413214834288&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以上为整体类继承结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主要特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据以键值 (kay-value) 对方式储存的一个集合容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;key 不重复&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以使用 null 的键和 null 的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不保证 key-value 映射的顺序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非线程安全实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK1.7: 数组 + 链表&lt;/li&gt;
&lt;li&gt;JDK1.8: 数组 + 链表 + 红黑树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashMap 性能参数 q&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始容量 capacity: 创建数组的长度默认是 16, 如果太少，很容易触发扩容，如果太多，遍历数组会比较慢&lt;/li&gt;
&lt;li&gt;负载因子 loadFactor: 一个衡量的尺度，数组长度达到多少的时候触发数组自动扩容，默认为 0.75&lt;/li&gt;
&lt;li&gt;阈值 threshold: &lt;code&gt;阈值=容量*负载因子&lt;/code&gt; ，默认 &lt;code&gt;16*0.75=12&lt;/code&gt; , 当元素数量超过阈值时触发扩容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;多线程条件下hashmap有什么问题吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程条件下hashmap有什么问题吗&#34;&gt;#&lt;/a&gt; 多线程条件下 HashMap 有什么问题吗&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;多线程条件下会导致死循环的问题，导致 CPU100%&lt;/li&gt;
&lt;li&gt;多线程 put 可能导致元素丢失&lt;/li&gt;
&lt;li&gt;put 和 get 并发时，可能导致 get 为 null&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hashmap链表节点过深时为什么选择使用红黑树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hashmap链表节点过深时为什么选择使用红黑树&#34;&gt;#&lt;/a&gt; HashMap 链表节点过深时为什么选择使用红黑树&lt;/h2&gt;
&lt;p&gt;该问题要根据二叉树的特性来回答&lt;/p&gt;
&lt;p&gt;二叉查找树&lt;/p&gt;
&lt;p&gt;强平衡二叉查找树&lt;/p&gt;
&lt;p&gt;弱平衡二叉查找树&lt;/p&gt;
&lt;p&gt;红黑树&lt;/p&gt;
&lt;h2 id=&#34;什么是hash碰撞发射hash碰撞怎么办&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是hash碰撞发射hash碰撞怎么办&#34;&gt;#&lt;/a&gt; 什么是 hash 碰撞，发射 hash 碰撞怎么办&lt;/h2&gt;
&lt;p&gt;定义：对于不同的关键字，可能得到同一个 hash 地址，即 key1!=key2 而 f (key1) == f (key2), 对于这种现象称之为 hash 碰撞，也叫 hash 冲突&lt;/p&gt;
&lt;p&gt;一般 hash 冲突只能尽量地减少，无法完全避免，因为关键字在理论上可以有无限多个，而用来储存这些关键字的数组容量有限的，所以就必然会导致 hash 冲突，只能通过选择合适的 hash 函数来降低发生 hash 冲突的概率&lt;/p&gt;
&lt;p&gt;具体解决办法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放地址法：当发生 hash 冲突的时候，按照某种方法继续探测 hash 表中其他储存位置，一直找到空位置为止&lt;/li&gt;
&lt;li&gt;再 hash 法：发生冲突时再次 hash, 直到没有冲突&lt;/li&gt;
&lt;li&gt;链地址法 (HashMap 采用的方法): 当发生 hash 冲突时，以链表的方式储存冲突元素，插入方式头插尾插均可.(虽然该方法是一种不错的解决方式，但也存在一些明显的弊端，在极端情况下，查询的时间还是会达到 O (n) 级别，此时哈希表退化成普通链表，此时查找元素，时间复杂度为 O (n). 因此，在链表达到一定长度后，把链表转化为一棵树可以提高查找效率，HashMap 源码中就是这么实现的。当数组长度大于 64, 且数组某个位置上的链表长度大于 8 时，就会把数组某个位置上的链表转换为一棵红黑树)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;concurrenthashmap底层如何实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#concurrenthashmap底层如何实现&#34;&gt;#&lt;/a&gt; ConcurrentHashMap 底层如何实现&lt;/h2&gt;
&lt;p&gt;在 JDK1.7 和 JDK1.8 实现方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.7: 数据结构为 Segment [] 数组 + HashEntry [] 数组 +; 链表，Segment 继承 ReentrantLock, 采用分段锁 (默认 16 把锁), 每一把锁只锁一个 Segment&lt;/li&gt;
&lt;li&gt;1.8: 数据结构为 Node [] 数组 + 链表 + 红黑树，初始化 Node 数组采用 CAS+volatile; 放数据时采用 synchronize&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--MyBatis/</guid>
            <title>八股文概要--MyBatis</title>
            <link>https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--MyBatis/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <category term="JAVA八股文" scheme="https://kagurazakaasahi.github.io/categories/study/JAVA%E5%85%AB%E8%82%A1%E6%96%87/" />
            <pubDate>Fri, 12 Apr 2024 15:39:44 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;mybatis框架如何实现分页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis框架如何实现分页&#34;&gt;#&lt;/a&gt; MyBatis 框架如何实现分页&lt;/h2&gt;
&lt;p&gt;分页分为两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑分页：将所有数据查出来，再在内存中进行分页处理&lt;/li&gt;
&lt;li&gt;物理分页：直接在数据库中进行分页&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体实现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己写 SQL 进行分页 (物理)&lt;/li&gt;
&lt;li&gt;使用拦截器进行分页 (物理)&lt;/li&gt;
&lt;li&gt;使用 PageHelper 进行分页 (物理)&lt;/li&gt;
&lt;li&gt;使用 RowBounds 进行分页 (逻辑)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mybatis框架里面的缓存机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis框架里面的缓存机制&#34;&gt;#&lt;/a&gt; MyBatis 框架里面的缓存机制&lt;/h2&gt;
&lt;p&gt;MyBatis 中有两级缓存：一级缓存，二级缓存 (都是 HashMap)&lt;/p&gt;
&lt;p&gt;一级缓存失效的几种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同的 SqlSession 对应不同的一级缓存&lt;/li&gt;
&lt;li&gt;同一个 SqlSession 但是查询条件不同&lt;/li&gt;
&lt;li&gt;同一个 SqlSession 两次查询期间执行了任何一次增删改操作&lt;/li&gt;
&lt;li&gt;同一个 SqlSession 两次查询期间手动清空了缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二级缓存&lt;/p&gt;
&lt;p&gt;在 SqlSession 关闭 (即 DAO 操作) 后将内容写入二级缓存&lt;/p&gt;
&lt;p&gt;二级缓存默认关闭，开启二级缓存，需要同时有如下两项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;application.yml
	mybatis:
		configuration:
			cache-enable:true
Mapper.xml
&amp;lt;cache/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;二级缓存是跨 SqlSession, 多个 SqlSession 可以共用同一个二级缓存；&lt;/p&gt;
&lt;p&gt;二级缓存是 mapper 级别的缓存，根据 mapper 的 namespace 区分，两个 mapper 的 namespace 相同&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
            <title>八股文概要--线程池</title>
            <link>https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <category term="JAVA八股文" scheme="https://kagurazakaasahi.github.io/categories/study/JAVA%E5%85%AB%E8%82%A1%E6%96%87/" />
            <pubDate>Fri, 12 Apr 2024 15:04:48 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;java线程池有哪些核心参数分别有什么作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java线程池有哪些核心参数分别有什么作用&#34;&gt;#&lt;/a&gt; java 线程池有哪些核心参数，分别有什么作用&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt; threadPoolExecutor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//corePoolSize 线程池中的核心线程数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//maximumPoolSize&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//keepAliveTime&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//keepAlive 的时间单位&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 任务队列&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Executors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defaultThreadFactory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 线程工厂，用来创建线程，一般采用默认，也可自定义实现&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CallerRunsPolicy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 拒绝策略 (当 corePoolSize 正在执行 /workQueue 已满 / 线程数达 maximumPoolSize 需要拒绝新提交过来的事务)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;构造方法最多的是七个参数 3&lt;/p&gt;
&lt;h2 id=&#34;线程池有哪些拒绝策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池有哪些拒绝策略&#34;&gt;#&lt;/a&gt; 线程池有哪些拒绝策略&lt;/h2&gt;
&lt;p&gt;JDK 提供了四种内置的拒绝策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbortPolicy (默认): 丢弃任务并抛出 RejectedExecutionException 异常&lt;/li&gt;
&lt;li&gt;DiscardPolicy: 直接丢弃任务，不抛出异常，没有任何提示&lt;/li&gt;
&lt;li&gt;DiscardOldestPolicy: 丢弃任务队列中最靠前的任务，当前提交的任务不会丢弃&lt;/li&gt;
&lt;li&gt;CallerRunsPolicy: 交由任务的调用线程 (提交任务的线程) 来执行任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除以上四种拒绝策略，还可以通过实现 RejectedExecutionHandler 接口，实现自定义的拒绝策略&lt;/p&gt;
&lt;h2 id=&#34;说一说线程池的执行流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说一说线程池的执行流程&#34;&gt;#&lt;/a&gt; 说一说线程池的执行流程&lt;/h2&gt;
&lt;h2 id=&#34;线程池核心线程数该如何设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池核心线程数该如何设置&#34;&gt;#&lt;/a&gt; 线程池核心线程数该如何设置&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;N_{thread} =N_{cpu}\times U_{cpu}\times (1+W/C)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.969438em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15139200000000003em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;u&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.969438em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15139200000000003em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;u&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ncpu = cpu 的核心数，Ucpu = cpu 的使用率 (在 0~1 之间)&lt;/li&gt;
&lt;li&gt;W = 线程等待时间，C = 线程计算时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据以上公式，可将任务分为 CPU 密集型和 IO 密集型&lt;/p&gt;
&lt;h3 id=&#34;cpu密集型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu密集型&#34;&gt;#&lt;/a&gt; CPU 密集型&lt;/h3&gt;
&lt;p&gt;CPU 密集型：线程数 = CPU 核心数 + 1&lt;/p&gt;
&lt;p&gt;这种任务主要消耗 CPU 资源，比如加解密，压缩，计算等一系列需要大量耗费 CPU 资源的任务&lt;/p&gt;
&lt;p&gt;比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其他原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间.&lt;/p&gt;
&lt;h3 id=&#34;io密集型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io密集型&#34;&gt;#&lt;/a&gt; IO 密集型&lt;/h3&gt;
&lt;p&gt;线程数 = CPU 核心数 * 2&lt;/p&gt;
&lt;p&gt;这种任务会有大部分时间进行 IO 操作，比如想 MySQL 数据库，文件读写，网络通信等任务，这类任务不会特别消耗 CPU 资源，但是 IO 操作比较耗时，会占用比较多的时间&lt;/p&gt;
&lt;p&gt;线程在处理 IO 的时间段内不会占用 CPU, 这时就可以将 CPU 交出给其他线程使用，因此在 IO 密集型任务的应用中可以多配置一些线程&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;因此核心线程数配置的数量参考 CPU 的运行，合理配置线程数量就可以最大限度的利用 CPU&lt;/p&gt;
&lt;p&gt;基本原则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程执行时间越多，就需要越少的线程&lt;/li&gt;
&lt;li&gt;线程执行时间越少，就需要越多的线程&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--Spring/</guid>
            <title>八股文概要--Spring</title>
            <link>https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--Spring/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <category term="JAVA八股文" scheme="https://kagurazakaasahi.github.io/categories/study/JAVA%E5%85%AB%E8%82%A1%E6%96%87/" />
            <pubDate>Fri, 12 Apr 2024 04:47:57 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;spring的bean是线程安全的吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring的bean是线程安全的吗&#34;&gt;#&lt;/a&gt; Spring 的 Bean 是线程安全的吗&lt;/h2&gt;
&lt;p&gt;不是&lt;/p&gt;
&lt;p&gt;Spring 容器中的 Bean 默认是 singleton 单例的，所有线程共享一个单例 Bean, 因此是存在资源竞争的；&lt;/p&gt;
&lt;p&gt;但在实际开发中，单例 Bean 一般都是以无状态的方式来使用，即线程之间的操作不会对 Bean 的成员执行除查询以外的操作，所以这个 Bean 又可以说是线程安全的。比如：Controller,Service,Dao 等这些 Bean 大多数是无状态的，我们不会对这些 Bean 中的属性进行修改操作，只需要关注方法本身即可；&lt;/p&gt;
&lt;h2 id=&#34;如何保证spring容器中bean是线程安全的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何保证spring容器中bean是线程安全的&#34;&gt;#&lt;/a&gt; 如何保证 Spring 容器中 Bean 是线程安全的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;把默认的 singleton 单例的 Bean 改为 prototype 多例的 Bean&lt;/li&gt;
&lt;li&gt;在 Bean 对象中避免定义可变的成员变量&lt;/li&gt;
&lt;li&gt;如果 Bean 对象中需要定义可变成员变量，将可变成员变量保存在 ThreadLocal 中；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么情况下会触发spring事务回滚&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么情况下会触发spring事务回滚&#34;&gt;#&lt;/a&gt; 什么情况下会触发 Spring 事务回滚&lt;/h2&gt;
&lt;p&gt;在事务方法发生异常时触发&lt;/p&gt;
&lt;h2 id=&#34;如果事务方法抛出ioexception是否会触发spring事务回滚&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果事务方法抛出ioexception是否会触发spring事务回滚&#34;&gt;#&lt;/a&gt; 如果事务方法抛出 IOException 是否会触发 Spring 事务回滚&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果采用 Spring 默认的事务回滚规则，它默认是发生 RuntimeException 异常时触发事务回滚，而现在是抛出 IOException 异常，那么不会触发 Spring 事务回滚&lt;/li&gt;
&lt;li&gt;如果想触发 IOException 异常事务回滚，需要指定回滚的规则&lt;/li&gt;
&lt;li&gt;@Transactional(rollbackFor = IOException.class)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么情况下spring事务会失效&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么情况下spring事务会失效&#34;&gt;#&lt;/a&gt; 什么情况下 Spring 事务会失效&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同一个 service 中，方法 a 标注事务注解，方法 b 没有标注事务注解 (a 有，b 没有)&lt;/li&gt;
&lt;li&gt;同一个 service 中，没有标注事务注解的 b 方法调用标注了事务注解的 a 方法 (无事务)&lt;/li&gt;
&lt;li&gt;不同的 Service 中，没有标注事务注解的 b 方法调用标注了事务注解的 a 方法 (有事务)&lt;/li&gt;
&lt;li&gt;标注了事务注解的 public 方法，protected 方法，默认无修饰方法，private 方法，final 方法，static 方法 (public 有效，其他均无效)&lt;/li&gt;
&lt;li&gt;多线程中的事务 (仅对当前线程有效，异步的新线程无效)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体情况如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异常类型错误&lt;/li&gt;
&lt;li&gt;方法或类上没有标注 @Transactional&lt;/li&gt;
&lt;li&gt;同一类中，方法内部自调用&lt;/li&gt;
&lt;li&gt;事务方法不是 public 的&lt;/li&gt;
&lt;li&gt;多线程调用&lt;/li&gt;
&lt;li&gt;异常被 try...catch&lt;/li&gt;
&lt;li&gt;手动抛了别的异常&lt;/li&gt;
&lt;li&gt;事务方法所在的 Bean 未被 Spring 容器管理&lt;/li&gt;
&lt;li&gt;方法的事务传播类型不支持事务&lt;/li&gt;
&lt;li&gt;表的数据库引擎不支持事务，比如 MyISAM 存储引擎不支持事务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring框架bean的生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring框架bean的生命周期&#34;&gt;#&lt;/a&gt; Spring 框架 Bean 的生命周期&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;解析 xml 文件配置或者注解的类，得到 BeanDefinition&lt;/li&gt;
&lt;li&gt;通过 BeanDefinition 反射创建 Bean 对象 (实例化 Bean 对象)=-&lt;/li&gt;
&lt;li&gt;对 Bean 对象进行实例填充&lt;/li&gt;
&lt;li&gt;回调实现 Aware 接口的方法，如 BeanNameAware&lt;/li&gt;
&lt;li&gt;调用 BeanPostProcessor 的初始化前方法&lt;/li&gt;
&lt;li&gt;调用 init 初始化方法 (如果有的话)&lt;/li&gt;
&lt;li&gt;调用 BeanPostProcessor 的初始化后方法，此处会进行 AOP&lt;/li&gt;
&lt;li&gt;将创建好的 Bean 对象放入一个 Map 中&lt;/li&gt;
&lt;li&gt;业务中使用 Bean 对象就从 Map 中获取&lt;/li&gt;
&lt;li&gt;Spring 容器关闭时调用 DisposableBean 的 destory 方法销毁 Bean 对象&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--Redis/</guid>
            <title>八股文概要--Redis</title>
            <link>https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--Redis/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <category term="JAVA八股文" scheme="https://kagurazakaasahi.github.io/categories/study/JAVA%E5%85%AB%E8%82%A1%E6%96%87/" />
            <pubDate>Thu, 11 Apr 2024 10:55:23 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;redis应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis应用场景&#34;&gt;#&lt;/a&gt; Redis 应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缓存：热点数据 (经常查询，但不修改或删除数据) 首选 Redis 缓存，性能优秀&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分布式锁：多个 tomcat 通过 Redis 获取锁后才能访问 MySQL 数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现方式：Jedis,Lettuce,RedisTemplete,Redisson (更加方便，无需额外写代码)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体实现&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取锁:setnx key value&lt;/li&gt;
&lt;li&gt;设置锁过期时间:expire key 30&lt;/li&gt;
&lt;li&gt;执行业务代码&lt;/li&gt;
&lt;li&gt;释放锁: del key&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redisson 实现分布式锁&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取锁:redisson.getLock (&amp;quot;lock&amp;quot;);lock.lock ();&lt;/li&gt;
&lt;li&gt;执行业务代码&lt;/li&gt;
&lt;li&gt;释放锁:lock.unlock ();&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redisson 实现的分布式锁是可重入的吗？&lt;/p&gt;
&lt;p&gt;可重入：即可重复获取，它指的是线程 T 获取到锁 A 之后，线程 T 再次获取锁 A 还是可以获取到的，java 中的 synchronized,ReentrantLock 都是可重入锁&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Token 存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;短信验证码存储 (后端生成的验证码存入 Redis, 然后与用户发送的验证码进行比较)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计数器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局唯一 ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排行榜 (使用 ZSet 结构)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;限流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;购物车&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点赞关注&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现分布式锁需要注意哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现分布式锁需要注意哪些问题&#34;&gt;#&lt;/a&gt; 实现分布式锁需要注意哪些问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不是原子操作 (即必须将获取锁和设置锁的过期时间变成一个整体进行操作)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有释放锁 (没有 del 锁，导致后面的线程无法拿到锁，当然如果设置了过期时间，还可以等过期时间结束)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放了锁，但业务还未执行完毕 (即执行业务代码耗时超过了锁的过期时间)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放了别人的锁 (因锁的过期时间过短，导致他人拿到自己的锁，而通过释放锁的操作将他人拿到的锁释放，解决方法为在释放锁时加入判断是否是自己的锁)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大量请求竞争锁失败&lt;/p&gt;
&lt;p&gt;解决方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;重试 (重试三到五次，若未拿到锁，返回获取锁失败)&lt;/li&gt;
&lt;li&gt;让业务流程尽可能短&lt;/li&gt;
&lt;li&gt;限流&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多节点 Redis 主从复制的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁的性能问题 (采用分段锁的方式，减少获取锁的排队时间)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁的可重入性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;采用redis缓存遇到缓存穿透缓存击穿缓存雪崩怎么办&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#采用redis缓存遇到缓存穿透缓存击穿缓存雪崩怎么办&#34;&gt;#&lt;/a&gt; 采用 Redis 缓存，遇到缓存穿透，缓存击穿，缓存雪崩怎么办？&lt;/h2&gt;
&lt;h4 id=&#34;缓存穿透&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存穿透&#34;&gt;#&lt;/a&gt; 缓存穿透&lt;/h4&gt;
&lt;p&gt;缓存穿透是由于请求一个不存在的数据而导致的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方案一：缓存空结果，对数据库查询不存在的数据依然缓存到缓存中，比如缓存一条空值 unknow, 有效减少查询数据库的效率。优点是实现简单。缺点是缓存了无效数据，占用 Redis 缓存，可能存在缓存与数据库不一致的情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方案二：布隆过滤器。在访问 Redis 之前，先通过布隆过滤器进行筛选。优点是不会缓存无效数据，缺点是实现比较复杂，存在一定的误判.&lt;/p&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;布隆过滤器&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;布隆过滤器用于检索一个元素是否在一个集合中。它采用一个很长的二进制数组，通过一些列 hash 函数来确定该数据是否存在.&lt;/p&gt;
&lt;p&gt;具体实现如下&lt;/p&gt;
&lt;p&gt;在向布隆过滤器中添加元素时，会使用多个哈希函数对元素进行 hash, 然后使用数组长度取余，算出一个索引位置，再把数组这几个位置都设置为 1, 这样就完成了元素的添加操作.&lt;/p&gt;
&lt;p&gt;向布隆过滤器查询元素是存在时，和添加元素一样，. 算出数组位置。然后看数组对应位置是否&lt;mark&gt;都&lt;/mark&gt;为 1, 只要有一个位置为 0, 代表存在。如果这几个位置都为 1, 代表&lt;mark&gt;可能&lt;/mark&gt;存在.&lt;/p&gt;
&lt;p&gt;目前的具体实现由 Guava,Hutool,Redisson&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缓存击穿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存击穿&#34;&gt;#&lt;/a&gt; 缓存击穿&lt;/h4&gt;
&lt;p&gt;高并发情况下，对于热点数据，当数据失效的一瞬间，或者刚开始时缓存中还没有对热点数据进行缓存，所有请求被发送到数据库去查询，导致数据库被压垮.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方案一：全局锁：在访问数据库之前都请求全局锁，获得的锁的线程才有资格去访问数据库，其他线程必须等待。由于现在的业务都是分布式的，本地锁没法控制其他服务的线程也等待，所以要用全局锁，比如分布式锁.&lt;/li&gt;
&lt;li&gt;方案二：对于热点数据，设置永不过期.
&lt;ul&gt;
&lt;li&gt;实现方案一：不设置过期时间，即 &amp;quot;物理&amp;quot; 不过期。优点是简单。缺点是缓存的热点数据是静态的，得不到更新&lt;/li&gt;
&lt;li&gt;实现方案二：逻辑不过期，通过一个异步线程，当检测到超过了过期时间，即更新缓存数据，这样只有前几条是旧数据，后面拿到的即为更新的数据.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缓存雪崩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存雪崩&#34;&gt;#&lt;/a&gt; 缓存雪崩&lt;/h4&gt;
&lt;p&gt;在某一时刻，大量的 key 或者整个缓存的数据全部过期了或者缓存发生了故障，然后瞬间所有的请求都落到数据库，数据库被压垮&lt;/p&gt;
&lt;p&gt;如何解决？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Redis 高可用 (搭建 Redis Sentinel 或者 Redis Cluster 集群), 避免 Redis 不可用&lt;/li&gt;
&lt;li&gt;给不同的 key 设置不同的过期时间&lt;/li&gt;
&lt;li&gt;本地缓存 (二级缓存) + 限流 &amp;amp; 降级，避免数据库被压垮&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;缓存雪崩与缓存击穿的区别&lt;/p&gt;
&lt;p&gt;缓存击穿某些热点数据 (或者说是同一条数据) 过期了，而走数据库 (即主体为被频繁访问的少量数据)&lt;/p&gt;
&lt;p&gt;缓存雪崩强调的是大量数据 (或者说是所有数据) 都过期了，而走数据库 (即主题为大量数据)&lt;/p&gt;
&lt;p&gt;因此，缓存雪崩核心就是，缓存无法使用，就全部走数据库 \&lt;/p&gt;
&lt;h2 id=&#34;redis内存使用完了怎么办&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis内存使用完了怎么办&#34;&gt;#&lt;/a&gt; Redis 内存使用完了怎么办&lt;/h2&gt;
&lt;p&gt;通过内存配置文件配置最大使用内存&lt;/p&gt;
&lt;p&gt;当达到最大使用内存时使用内存淘汰策略&lt;/p&gt;
&lt;p&gt;默认淘汰策略为 noeviction&lt;/p&gt;
&lt;h2 id=&#34;redis的string类型的值最大能放多大的数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis的string类型的值最大能放多大的数据&#34;&gt;#&lt;/a&gt; Redis 的 String 类型的值最大能放多大的数据&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;string:512MB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List:2^32-1 (4,294,967,295) 个元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set:2^32-1 (4,294,967,295) 个元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hash: 每个 hash 值最大能放 2^32-1 (4,294,967,295) 个 filed-value 对，Hash 类型仅受部署 Redis 的服务器上的总内存的限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZSet 与 Set 一样&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何保证数据库与redis的数据一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何保证数据库与redis的数据一致性&#34;&gt;#&lt;/a&gt; 如何保证数据库与 Redis 的数据一致性&lt;/h2&gt;
&lt;p&gt;即数据库发生增删改的时候，数据库的数据要和 Redis 缓存的数据保持一致性&lt;/p&gt;
&lt;h2 id=&#34;redis集群最大能部署多少个主节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis集群最大能部署多少个主节点&#34;&gt;#&lt;/a&gt; Redis 集群最大能部署多少个主节点&lt;/h2&gt;
&lt;p&gt;16384&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--SpringBoot/</guid>
            <title>八股文概要--SpringBoot</title>
            <link>https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--SpringBoot/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <category term="JAVA八股文" scheme="https://kagurazakaasahi.github.io/categories/study/JAVA%E5%85%AB%E8%82%A1%E6%96%87/" />
            <pubDate>Tue, 09 Apr 2024 04:22:14 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;springboot自动装配原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot自动装配原理&#34;&gt;#&lt;/a&gt; SpringBoot 自动装配原理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;@SpringBootApplication (main 方法上的注解)&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration (自动装配核心注解)&lt;/li&gt;
&lt;li&gt;导入 AutoConfigurationImportSelector 组件&lt;/li&gt;
&lt;li&gt;通过 SpringFactoriesLoader 类读取
&lt;ul&gt;
&lt;li&gt;META-INF/spring.factories&lt;/li&gt;
&lt;li&gt;org.springframework.boot.autoconfigure.AutoConfiguration.imports&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;条件注解进行过滤 (只有导入了相关 jar 包才会进行配置)&lt;/li&gt;
&lt;li&gt;ImportSelector 接口&lt;/li&gt;
&lt;li&gt;BeanDefinition&lt;/li&gt;
&lt;li&gt;实例化 Bean 对象，放入 Spring 的 IOC 容器中&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何实现spring-boot-starter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何实现spring-boot-starter&#34;&gt;#&lt;/a&gt; 如何实现 Spring Boot Starter&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;写一个 starter 项目，一般是一个空壳，里面不写代码，主要起到 依赖其他项目的作用；&lt;/li&gt;
&lt;li&gt;写一个真正实现自动装配逻辑的项目，在项目 classpath 下写一个 META-INF/spring.factories 文件；&lt;/li&gt;
&lt;li&gt;在 spring.factories 中添加配置:org.springframework.boot.autoconfigure.EnableAutoConfigure = com.kablog.XXXConfiguration&lt;/li&gt;
&lt;li&gt;XXXConfiguration 类需要添加注解 @Configuration;&lt;/li&gt;
&lt;li&gt;上述类一般使用 @Conditional 来适应不同的环境；&lt;/li&gt;
&lt;li&gt;在 XXXConfiguration 类中编写具体代码实现自动化配置，给使用者把该配的配置好，让他人可以直接使用&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring-boot-与-ssm-有什么区别和优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot-与-ssm-有什么区别和优势&#34;&gt;#&lt;/a&gt; Spring Boot 与 SSM 有什么区别和优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SSM10 随版本更新，依赖越来越多，配置越来越多，需要配置大量 xml 文件，开发繁琐&lt;/li&gt;
&lt;li&gt;SpringBoot 约定优于配置，采用自动化配置，自动装配 Bean, 无需 SSM 一样的繁琐配置&lt;/li&gt;
&lt;li&gt;SpringBoot 直接使用 java main 方法运行，可直接内嵌 Tomcat 服务器运行 SpringBoot 程序&lt;/li&gt;
&lt;li&gt;SpingBoot 采用 starter 依赖简化 Maven 配置，自动管理所有 jar 包版本，加入 web starter, 自动引入内嵌的 Tomcat; 当然还提供了大量的 starter&lt;/li&gt;
&lt;li&gt;SpringBoot 可以直接打包成 jar 包运行，部署简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-boot项目如何兼容老的spring项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot项目如何兼容老的spring项目&#34;&gt;#&lt;/a&gt; Spring Boot 项目如何兼容老的 Spring 项目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 @ImportResource 注解导入旧配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javaconfig&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javaconfig&#34;&gt;#&lt;/a&gt; JavaConfig&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Configuration&lt;/code&gt; : 使用 &lt;code&gt;@Configuration&lt;/code&gt;  + 类 替代 xml 文件对 bean 定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Bean&lt;/code&gt; : 在 @Configuration 中 &lt;code&gt;@Bean&lt;/code&gt;  替代  &lt;code&gt;&amp;lt;bean id = &amp;quot;XX&amp;quot; class = &amp;quot;XX&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ComponentScan&lt;/code&gt; : 使用 &lt;code&gt;@ComponentScan(basePackage=&amp;quot;XX&amp;quot;)&lt;/code&gt; + 类 替代  &lt;code&gt;&amp;lt;context:componentscan basepackage = &amp;quot;XX&amp;quot;&amp;gt;&lt;/code&gt; \&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableWebMvc&lt;/code&gt; : 使用 &lt;code&gt;EnableWebMvc&lt;/code&gt;  替代  &lt;code&gt;&amp;lt;mvc:annotation-driven&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ImportResource&lt;/code&gt; : 使用 &lt;code&gt;@ImportResource(locations = &amp;quot;classpath:xxx.xml&amp;quot;)&lt;/code&gt; + 类 替代  &lt;code&gt;&amp;lt;import resource = &amp;quot;xxx.xml&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Properties&lt;/code&gt; : 使用 &lt;code&gt;@Properties(&amp;quot;classpath:*.properties&amp;quot;)&lt;/code&gt; + 类 替代 &lt;code&gt;&amp;lt;context:property-placeholder location=&amp;quot;classpath:*.properties&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Value&lt;/code&gt; : 使用 &lt;code&gt;@Value(&amp;quot;$&amp;#123;jdbc.xxx&amp;#125;&amp;quot;)&lt;/code&gt;  来配置数据源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用注解来开发项目&lt;/p&gt;
&lt;h2 id=&#34;如何排除某些类的自动装配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何排除某些类的自动装配&#34;&gt;#&lt;/a&gt; 如何排除某些类的自动装配&lt;/h2&gt;
&lt;p&gt;某些时候配置了如 mybatis-starter 等依赖包，它会自动装配。此时若没有在 properties 中填入相应的 &lt;code&gt;host/port/password/url&lt;/code&gt;  等内容，那么运行就会报错。此时应先排除自动装配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;properties&lt;/code&gt;  文件中添加 &lt;code&gt;spring.autoconfigure.exclude = org.xxx.DataSourceAutoConfiguration&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在类上添加注解 &lt;code&gt;@SpringBootApplication(exclude = &amp;#123;DataSourceAutoConfiguration.class,xxx.class&amp;#125;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何实现异步调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何实现异步调用&#34;&gt;#&lt;/a&gt; 如何实现异步调用&lt;/h2&gt;
&lt;h3 id=&#34;是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么&#34;&gt;#&lt;/a&gt; 是什么&lt;/h3&gt;
&lt;p&gt;asynchronous call (异步调用): 一个无需等待被调用函数的返回值就能让操作继续进行的方法；&lt;/p&gt;
&lt;h3 id=&#34;使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用场景&#34;&gt;#&lt;/a&gt; 使用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于一些不需要在主线流程中执行的任务：如注册时发送欢迎短信&lt;/li&gt;
&lt;li&gt;不需要实施等待计算结果的任务：如业务执行记录日志&lt;/li&gt;
&lt;li&gt;为了利用多核 cpu 并发执行的任务：如下单时获取用户住址，用户余额，商品信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;怎么解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么解决&#34;&gt;#&lt;/a&gt; 怎么解决&lt;/h3&gt;
&lt;p&gt;将这些任务异步执行，即放在另一个线程中去执行，从而避免主线程的阻塞和等待&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式一:@EnableAsync + @Async + Future + ThreadPoolTaskExecutor&lt;/li&gt;
&lt;li&gt;方式二：CompletableFuture + ThreadPoolTaskExecutor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;springboot默认使用什么动态代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot默认使用什么动态代理&#34;&gt;#&lt;/a&gt; SpringBoot 默认使用什么动态代理&lt;/h2&gt;
&lt;p&gt;默认使用 CGLIB 动态代理而不是 JDK 动态代理&lt;/p&gt;
&lt;p&gt;主要是考虑兼容性&lt;/p&gt;
&lt;p&gt;CGLIB 动态代理可以代理任何类型的目标类，而 JDK 动态代理只能代理实现了接口的目标类，&lt;/p&gt;
&lt;p&gt;因此 CGLIB 覆盖了 JDK 所有使用场景，故为了保证 SpringBoot 中的 AOP 可以面向任何类型的 Bean,&lt;/p&gt;
&lt;p&gt;SpringBoot 默认使用 CGLIB 作为代理的实现方式.&lt;/p&gt;
&lt;h2 id=&#34;springcloud组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springcloud组件&#34;&gt;#&lt;/a&gt; SpringCloud 组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注册中心:&lt;s&gt;Eureka&lt;/s&gt;,&lt;mark&gt;Nacos&lt;/mark&gt;,Zookeeper,Consul;(服务注册)&lt;/li&gt;
&lt;li&gt;负载均衡：Ribbon,&lt;mark&gt;LoadBalancer&lt;/mark&gt;;(客户端的负载均衡)&lt;/li&gt;
&lt;li&gt;服务调用:&lt;s&gt;Feign&lt;/s&gt;,&lt;mark&gt;OpenFeign&lt;/mark&gt;,Dubbo RPC;(优雅调用远程服务)&lt;/li&gt;
&lt;li&gt;配置中心：Spring Cloud Config,&lt;mark&gt;Nacos&lt;/mark&gt;;(统一管理服务配置)&lt;/li&gt;
&lt;li&gt;熔断降级:&lt;s&gt;Hystrix&lt;/s&gt;,&lt;mark&gt;Sentinel&lt;/mark&gt;;(急骤请求，防止服务雪崩)&lt;/li&gt;
&lt;li&gt;分布式事务:&lt;mark&gt;Seata&lt;/mark&gt;;(跨库跨服务的事务管理)&lt;/li&gt;
&lt;li&gt;服务网关:&lt;s&gt;Zuul 1.x&lt;/s&gt;,Zuul 2.x,&lt;mark&gt;Spring Cloud Gateway&lt;/mark&gt;;(系统入口门面)&lt;/li&gt;
&lt;li&gt;链路跟踪:&lt;mark&gt;Skywalking&lt;/mark&gt;,Zipkin;(监控服务状态，协助排查问题)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-cloud的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud的理解&#34;&gt;#&lt;/a&gt; Spring Cloud 的理解&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将微服务面临的负载均衡，服务的注册与发现，服务调用，服务路由，服务熔断等技术问题解决方案打包好.&lt;/li&gt;
&lt;li&gt;提供了一整套微服务解决方案，降低开发难度，提供统一标准&lt;/li&gt;
&lt;li&gt;为 Spring 生态注入更强的生命力&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;服务熔断服务降级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务熔断服务降级&#34;&gt;#&lt;/a&gt; 服务熔断？服务降级？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务熔断：当服务 A 调用服务 B 时，如果此时服务 B 不可用，那么上游的服务 A 为了保证自己不受影响，就切断调用服务 B, 防止发生服务雪崩，直到 B 服务恢复.(具体指提前做好一种兜底措施，比如返回假的数据，或者记录数据信息到数据库，redis, 文件中，后续进行补救，直到 B 服务恢复)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务降级：当系统负载过高时，对非核心的业务服务进行关闭，来保证核心业务的正常运行；(关闭某些不重要的服务，或者拒绝低优先级应用的服务请求，保证核心应用正常工作)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相同：目的相同：保证服务可用性，防止系统整体负载过大甚至崩溃；&lt;/p&gt;
&lt;p&gt;​       表现相同：都是表现出服务暂时不可用的状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同：服务熔断一般是某个服务 (下游服务) 故障引起，而服务降级一般是从整体负荷考虑.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;项目重构时为何要对系统进行拆分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目重构时为何要对系统进行拆分&#34;&gt;#&lt;/a&gt; 项目重构时为何要对系统进行拆分&lt;/h2&gt;
&lt;h2 id=&#34;eureka和nacos区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eureka和nacos区别&#34;&gt;#&lt;/a&gt; Eureka 和 Nacos 区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;相同：1. 都用于服务的注册与发现 2. 都支持服务的心跳健康检查 3. 都支持高可用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nacos&lt;/th&gt;
&lt;th&gt;Eureka&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;支持主动对微服务状态检测，临时实例心跳检测，永久实例主动检测&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;临时实例不正常会从注册中心删除，永久实例不会删除&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支持服务列表变更时的主动消息推送，服务列表更新会更及时&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;集群支持两种模式，默认 AP, 存在非临时实例时采用 CP 模式&lt;/td&gt;
&lt;td&gt;只支持 AP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支持注册中心，配置中心&lt;/td&gt;
&lt;td&gt;只支持注册中心&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;具备较好上下线流量管理界面&lt;/td&gt;
&lt;td&gt;后台界面仅供展示，需使用 API 操作上下线，无流量管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;社区活跃&lt;/td&gt;
&lt;td&gt;闭源&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;acidbase理论cap理论的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#acidbase理论cap理论的关系&#34;&gt;#&lt;/a&gt; ACID,BASE 理论，CAP 理论的关系&lt;/h2&gt;
&lt;h3 id=&#34;acid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#acid&#34;&gt;#&lt;/a&gt; ACID&lt;/h3&gt;
&lt;p&gt;ACID 是传统数据库中常用的设计理念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Atomicity (原子性)&lt;/li&gt;
&lt;li&gt;Consistency (一致性)&lt;/li&gt;
&lt;li&gt;Isolation (隔离性)&lt;/li&gt;
&lt;li&gt;Durability (持久性)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ACID 它追求的是数据的强一致性模型&lt;/p&gt;
&lt;h3 id=&#34;base理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#base理论&#34;&gt;#&lt;/a&gt; BASE 理论&lt;/h3&gt;
&lt;p&gt;BASE 理论支持的是大型分布式系统；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本可用 (Basically Available): 分布式系统出现不可预知故障时，允许损失部分可用性&lt;/li&gt;
&lt;li&gt;软状态 (Soft State): 允许系统中的数据存在中间状态，允许系统在不同节点的数据副本之间同步存在延时&lt;/li&gt;
&lt;li&gt;最终一致性 (Eventually Consistent): 所有数据副本在一段时间同步后最终一致的状态，无需实时保证系统数据强一致&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;BASE 理论是通过牺牲强一致性以获得高可用性&lt;/p&gt;
&lt;h3 id=&#34;cap理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap理论&#34;&gt;#&lt;/a&gt; CAP 理论&lt;/h3&gt;
&lt;p&gt;CAP 理论是支持分布式系统而提出的；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C: 一致性 (Consistency)&lt;/li&gt;
&lt;li&gt;A: 可用性 (Availability)&lt;/li&gt;
&lt;li&gt;P: 分区容错性 (Tolerance of network Partition)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分布式系统无法做到 CAP, 只能做到其中两项，要么 CP, 要么 AP&lt;/p&gt;
&lt;h3 id=&#34;三者关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三者关系&#34;&gt;#&lt;/a&gt; 三者关系&lt;/h3&gt;
&lt;p&gt;ACID 和 CAP,BASE 代表了两种截然相反的设计哲学；&lt;/p&gt;
&lt;p&gt;在分布式系统设计中，根据不同场景的实际情况，可以把 ACID,CAP,BASE 结合起来使用&lt;/p&gt;
&lt;h3 id=&#34;注册中心选择cp还是ap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注册中心选择cp还是ap&#34;&gt;#&lt;/a&gt; 注册中心选择 CP 还是 AP&lt;/h3&gt;
&lt;p&gt;简单来说，应该优先选择 AP (可用性) 然后保证最终一致性即可，而选择 CP (一致性) 的话，随着应用规模增大，应用实例频繁注册或删除，必将影响注册中心服务注册与发现的效率.&lt;/p&gt;
&lt;h2 id=&#34;接口幂等性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口幂等性&#34;&gt;#&lt;/a&gt; 接口幂等性&lt;/h2&gt;
&lt;p&gt;幂等性 = 多次执行无副作用&lt;/p&gt;
&lt;p&gt;考虑幂等性即考虑多次执行，多次请求的情况&lt;/p&gt;
&lt;p&gt;在以下场景可能会使用到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因网络波动引起的重复请求&lt;/li&gt;
&lt;li&gt;用户重复操作 (无意触发或因无响应而有意触发等)&lt;/li&gt;
&lt;li&gt;应用使用了失败或超时重试机制 (如 RPC 重试，业务层重试等)&lt;/li&gt;
&lt;li&gt;第三方平台的接口 (如：支付成功回调接口), 因为异常导致多次回调&lt;/li&gt;
&lt;li&gt;中间件 / 应用服务根据自身特性，也有可能进行重试&lt;/li&gt;
&lt;li&gt;用户双击提交按钮&lt;/li&gt;
&lt;li&gt;用户页面重复刷新&lt;/li&gt;
&lt;li&gt;使用浏览器后退按钮重复之前的操作，导致重复提交表单&lt;/li&gt;
&lt;li&gt;使用浏览器历史记录重复提交表单&lt;/li&gt;
&lt;li&gt;浏览器重复的 http 请求&lt;/li&gt;
&lt;li&gt;定时任务重复执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般在数据访问层进行幂等性的设计&lt;/p&gt;
&lt;p&gt;使用唯一索引防止幂等性问题：简单粗暴，当数据重复时会抛出异常，保证不会出现脏数据&lt;/p&gt;
&lt;p&gt;使用 Token+Redis 的幂等方案 (申请 token 阶段和业务操作阶段): 先获得 token 存入 redis, 根据 token 执行处理，然后删除 token. 重复请求时，由于缓存中没有 token, 表示非法请求&lt;/p&gt;
&lt;h2 id=&#34;分布式事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式事务&#34;&gt;#&lt;/a&gt; 分布式事务&lt;/h2&gt;
&lt;p&gt;事务通常用于数据库领域&lt;/p&gt;
&lt;p&gt;事务是指对数据库进行读或写的一组操作，要么都执行，要么都不执行，不允许只执行一部分的情况；&lt;/p&gt;
&lt;p&gt;由 insert,delete,update,select 组成的一组操作，要么都 commit, 要么都 rollback&lt;/p&gt;
&lt;p&gt;本地事务：仅支持单库事务，保证 ACID&lt;/p&gt;
&lt;p&gt;分布式事务：多个库，因此有多个数据源的连接，不能使用 spring 的事务管理&lt;/p&gt;
&lt;p&gt;分布式事务解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2PC&lt;/li&gt;
&lt;li&gt;3PC&lt;/li&gt;
&lt;li&gt;TCC&lt;/li&gt;
&lt;li&gt;本地消息异步确认&lt;/li&gt;
&lt;li&gt;可靠消息最终一致性&lt;/li&gt;
&lt;li&gt;最大努力通知&lt;/li&gt;
&lt;li&gt;RocketMQ 解决分布式事务&lt;/li&gt;
&lt;li&gt;阿里巴巴的 Seata 解决分布式事务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何进行服务的限流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计数器法&lt;/li&gt;
&lt;li&gt;漏桶算法&lt;/li&gt;
&lt;li&gt;令牌桶算法 (Guava 框架)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分布式环境如何进行服务的限流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx 限流&lt;/li&gt;
&lt;li&gt;OpenResty 限流&lt;/li&gt;
&lt;li&gt;Sentinel 限流&lt;/li&gt;
&lt;li&gt;Redis + Lua 限流&lt;/li&gt;
&lt;li&gt;Spring Cloud Gateway 限流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring常用注解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring常用注解&#34;&gt;#&lt;/a&gt; Spring 常用注解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Component&lt;/code&gt; ：泛指组件，当不确定一个 Bean 属于哪个层（如 Controller、Service 或 Repository）时使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt; ：用于标记控制层的组件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Service&lt;/code&gt; ：用于标记服务层的组件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Repository&lt;/code&gt; ：用于标记数据访问层的组件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Autowired&lt;/code&gt; ：自动注入依赖。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RequestMapping&lt;/code&gt; ：用于映射 HTTP 请求到处理器的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ResponseBody&lt;/code&gt; ：表示该方法的返回结果直接写入 HTTP 响应正文中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@PathVariable&lt;/code&gt; ：用于将请求 URL 中的模板变量映射到功能处理方法的参数上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RestController&lt;/code&gt; ：是 &lt;code&gt;@Controller&lt;/code&gt;  和 &lt;code&gt;@ResponseBody&lt;/code&gt;  的结合体，用于创建 RESTful 控制器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Transactional&lt;/code&gt; ：声明事务管理。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--mysql/</guid>
            <title>八股文概要--Mysql</title>
            <link>https://kagurazakaasahi.github.io/%E5%85%AB%E8%82%A1%E6%96%87%E6%A6%82%E8%A6%81--mysql/</link>
            <category term="学习" scheme="https://kagurazakaasahi.github.io/categories/study/" />
            <category term="JAVA八股文" scheme="https://kagurazakaasahi.github.io/categories/study/JAVA%E5%85%AB%E8%82%A1%E6%96%87/" />
            <pubDate>Mon, 08 Apr 2024 14:50:46 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MYSQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;关系型数据库&lt;/li&gt;
&lt;li&gt;默认引擎 InnoDB, 通过 JDBC 连接&lt;/li&gt;
&lt;li&gt;支持事务，分布式事务，savepoint&lt;/li&gt;
&lt;li&gt;undo,redo,binlog&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据库优化方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库优化方式&#34;&gt;#&lt;/a&gt; 数据库优化方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务器硬件:cpu, 内存，磁盘 io, 网卡流量&lt;/li&gt;
&lt;li&gt;服务器操作系统配置&lt;/li&gt;
&lt;li&gt;存储引擎选择&lt;/li&gt;
&lt;li&gt;数据库自身配置参数&lt;/li&gt;
&lt;li&gt;数据库表结构的设计和 SQL 语句的执行效率 (慢查询，不合理的数据库表结构设计，不合理索引)&lt;/li&gt;
&lt;li&gt;数据库架构：高并发下读写分离，分库分表，多级缓存，搜索引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何定位慢查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何定位慢查询&#34;&gt;#&lt;/a&gt; 如何定位慢查询&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;业务驱动&lt;/li&gt;
&lt;li&gt;测试驱动&lt;/li&gt;
&lt;li&gt;系统跟踪驱动 (Prometheus,SkyWalking)&lt;/li&gt;
&lt;li&gt;慢查询日志&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引&#34;&gt;#&lt;/a&gt; 索引&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一种数据结构，方便快速的查找数据，类似于书的目录&lt;/li&gt;
&lt;li&gt;底层数据结构为 B + 树 (多),hash 树&lt;/li&gt;
&lt;li&gt;类型分为，普通索引，唯一索引，fullText 索引，spatial 索引&lt;/li&gt;
&lt;li&gt;添加索引的方式&lt;/li&gt;
&lt;li&gt;索引的命名规范&lt;/li&gt;
&lt;li&gt;什么是索引下推，有什么作用 (减少回表次数)&lt;/li&gt;
&lt;li&gt;局部性原理与磁盘预读&lt;/li&gt;
&lt;li&gt;为什么使用自增数字作为组件索引 (依次往后写入，减少移动，减小开销)&lt;/li&gt;
&lt;li&gt;主键索引；辅助索引 (二级索引); 聚集索引 (聚簇索引); 非聚集索引 (非聚簇索引)&lt;/li&gt;
&lt;li&gt;什么是覆盖索引 (一种 sql 优化手段)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/3.25/</guid>
            <title>3.25</title>
            <link>https://kagurazakaasahi.github.io/3.25/</link>
            <pubDate>Mon, 25 Mar 2024 14:39:01 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;题1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题1&#34;&gt;#&lt;/a&gt; 题 1&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;54. 螺旋矩阵
给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。

 

示例 1：


输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]
示例 2：


输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]
 

提示：

m == matrix.length
n == matrix[i].length
1 &amp;lt;= m, n &amp;lt;= 10
-100 &amp;lt;= matrix[i][j] &amp;lt;= 100
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) &amp;#123;
    *returnSize = matrixSize * (*matrixColSize);
    int* arr = (int*)malloc(*returnSize * sizeof(int));
    int num = 0;
    int UP = 0;
    int DOWN = matrixSize - 1;
    int LEFT = 0;
    int RIGHT = *matrixColSize - 1;

    while (LEFT &amp;lt;= RIGHT &amp;amp;&amp;amp; UP &amp;lt;= DOWN) &amp;#123;
        for (int i = LEFT; i &amp;lt;= RIGHT &amp;amp;&amp;amp; num &amp;lt; *returnSize; i++) &amp;#123;
            arr[num++] = matrix[UP][i];
        &amp;#125;
        UP++;
        for (int i = UP; i &amp;lt;= DOWN &amp;amp;&amp;amp; num &amp;lt; *returnSize; i++) &amp;#123;
            arr[num++] = matrix[i][RIGHT];
        &amp;#125;
        RIGHT--;
        for (int i = RIGHT; i &amp;gt;= LEFT &amp;amp;&amp;amp; num &amp;lt; *returnSize; i--) &amp;#123;
            arr[num++] = matrix[DOWN][i];
        &amp;#125;
        DOWN--;
        for (int i = DOWN; i &amp;gt;= UP &amp;amp;&amp;amp; num &amp;lt; *returnSize; i--) &amp;#123;
            arr[num++] = matrix[i][LEFT];
        &amp;#125;
        LEFT++;
    &amp;#125;
    return arr;
&amp;#125;
//通过设置最上,最下,最左,最右作为边界条件,按照左下右上的顺序,输出到返回数组中,并修改边界,通过判定边界是否重合来决定何时停止循环
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/details&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/3.24/</guid>
            <title>3.24</title>
            <link>https://kagurazakaasahi.github.io/3.24/</link>
            <pubDate>Sun, 24 Mar 2024 14:44:52 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;pre&gt;&lt;code&gt;73. 矩阵置零

给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素都设为 0 。请使用 原地 算法。

 

示例 1：


输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]
输出：[[1,0,1],[0,0,0],[1,0,1]]
示例 2：


输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

提示：

m == matrix.length
n == matrix[0].length
1 &amp;lt;= m, n &amp;lt;= 200
-231 &amp;lt;= matrix[i][j] &amp;lt;= 231 - 1
 

进阶：

一个直观的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。
一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。
你能想出一个仅使用常量空间的解决方案吗？
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void setZeroes(int** matrix, int matrixSize, int* matrixColSize) &amp;#123;
    int col0 = 1, rows = matrixSize, cols = *matrixColSize;
    
    // 使用第一行和第一列来标记0的位置,col0为(0,0)点
    for (int i = 0; i &amp;lt; rows; i++) &amp;#123;
        if (matrix[i][0] == 0) col0 = 0;
        for (int j = 1; j &amp;lt; cols; j++)
            if (matrix[i][j] == 0)
                matrix[i][0] = matrix[0][j] = 0;
    &amp;#125;
    
    // 逆序填充0，以防止第一行和第一列的标记被提前清除
    for (int i = rows - 1; i &amp;gt;= 0; i--) &amp;#123;
        for (int j = cols - 1; j &amp;gt;= 1; j--)
            if (matrix[i][0] == 0 || matrix[0][j] == 0)
                matrix[i][j] = 0;
        if (col0 == 0) matrix[i][0] = 0;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/details&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/3.18/</guid>
            <title>3.18</title>
            <link>https://kagurazakaasahi.github.io/3.18/</link>
            <pubDate>Mon, 18 Mar 2024 06:32:22 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;pre&gt;&lt;code&gt;3. 无重复字符的最长子串
给定一个字符串 s ，请你找出其中不含有重复字符的 最长
子串的长度。

 

示例 1:

输入: s = &amp;quot;abcabcbb&amp;quot;
输出: 3 
解释: 因为无重复字符的最长子串是 &amp;quot;abc&amp;quot;，所以其长度为 3。
示例 2:

输入: s = &amp;quot;bbbbb&amp;quot;
输出: 1
解释: 因为无重复字符的最长子串是 &amp;quot;b&amp;quot;，所以其长度为 1。
示例 3:

输入: s = &amp;quot;pwwkew&amp;quot;
输出: 3
解释: 因为无重复字符的最长子串是 &amp;quot;wke&amp;quot;，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，&amp;quot;pwke&amp;quot; 是一个子序列，不是子串。
 

提示：

0 &amp;lt;= s.length &amp;lt;= 5 * 104
s 由英文字母、数字、符号和空格组成
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;使用滑动窗口法即可解决，关键在于如何确定如何修改窗口边界&lt;/p&gt;
&lt;p&gt;具体代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int max(int a,int b)&amp;#123;
    return a&amp;gt;b?a:b;
&amp;#125;

int lengthOfLongestSubstring(char* s) &amp;#123;
 int char_index[128];
    memset(char_index, -1, sizeof(char_index)); // 初始化为 -1
    // 初始化滑动窗口的左边界
    int left = 0;
    // 初始化最长子串的长度
    int max_length = 0;	
    
    for (int right = 0; s[right] != &#39;\0&#39;; right++) &amp;#123;
        // 如果字符已经在数组中，并且它的索引大于等于左边界，更新左边界
        if (char_index[s[right]] &amp;gt;= left) &amp;#123;
            left = char_index[s[right]] + 1;
        &amp;#125;
        // 更新字符的索引
        char_index[s[right]] = right;
        // 更新最长子串的长度
        max_length = (right - left + 1) &amp;gt; max_length ? (right - left + 1) : max_length;
    &amp;#125;

    return max_length;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;这段代码实现了求解给定字符串 s 中不含重复字符的最长子串的长度。让我详细解释一下它的思路：

滑动窗口：这个算法使用了滑动窗口的思想。滑动窗口是一个固定大小的窗口，可以在字符串上滑动，以便处理连续的子串。
字符索引数组：代码中定义了一个名为 char_index 的整数数组，用于存储每个字符在字符串中的最新索引位置。初始时，所有元素都被设置为 -1。
左指针和右指针：我们使用两个指针 left 和 right 来构建滑动窗口。初始时，left 和 right 都指向字符串的开头。
遍历字符串：我们遍历字符串 s，从左到右，处理每个字符。
更新左指针：
如果字符 s[right] 已经在 char_index 数组中，并且它的索引大于等于 left，说明窗口内有重复字符。
此时，我们将 left 更新为 char_index[s[right]] + 1，即将左指针移动到重复字符的下一个位置，以消除重复。
更新字符索引：将 char_index[s[right]] 更新为 right，表示字符 s[right] 最新出现的位置。
更新最长子串长度：计算当前窗口的长度 (right - left + 1)，并将其与 max_length 比较，取较大值作为最长子串的长度。
右指针右移：将右指针 right 向右移动一位，继续处理下一个字符。
返回最长子串长度：最终返回 max_length，即不含重复字符的最长子串的长度。
这样，代码通过维护一个滑动窗口和字符索引数组，有效地找到了不含重复字符的最长子串的长度。

该代码值得学习的是用s[right]是否等于&#39;\0&#39;来判断是否到了数组末尾,避免了使用strlen计算数组的长度,然后使用?:来比较大小,省去了写max函数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;30. 串联所有单词的子串

给定一个字符串 s 和一个字符串数组 words。 words 中所有字符串 长度相同。

 s 中的 串联子串 是指一个包含  words 中所有字符串以任意顺序排列连接起来的子串。

例如，如果 words = [&amp;quot;ab&amp;quot;,&amp;quot;cd&amp;quot;,&amp;quot;ef&amp;quot;]， 那么 &amp;quot;abcdef&amp;quot;， &amp;quot;abefcd&amp;quot;，&amp;quot;cdabef&amp;quot;， &amp;quot;cdefab&amp;quot;，&amp;quot;efabcd&amp;quot;， 和 &amp;quot;efcdab&amp;quot; 都是串联子串。 &amp;quot;acdbef&amp;quot; 不是串联子串，因为他不是任何 words 排列的连接。
返回所有串联子串在 s 中的开始索引。你可以以 任意顺序 返回答案。

 

示例 1：

输入：s = &amp;quot;barfoothefoobarman&amp;quot;, words = [&amp;quot;foo&amp;quot;,&amp;quot;bar&amp;quot;]
输出：[0,9]
解释：因为 words.length == 2 同时 words[i].length == 3，连接的子字符串的长度必须为 6。
子串 &amp;quot;barfoo&amp;quot; 开始位置是 0。它是 words 中以 [&amp;quot;bar&amp;quot;,&amp;quot;foo&amp;quot;] 顺序排列的连接。
子串 &amp;quot;foobar&amp;quot; 开始位置是 9。它是 words 中以 [&amp;quot;foo&amp;quot;,&amp;quot;bar&amp;quot;] 顺序排列的连接。
输出顺序无关紧要。返回 [9,0] 也是可以的。
示例 2：

输入：s = &amp;quot;wordgoodgoodgoodbestword&amp;quot;, words = [&amp;quot;word&amp;quot;,&amp;quot;good&amp;quot;,&amp;quot;best&amp;quot;,&amp;quot;word&amp;quot;]
输出：[]
解释：因为 words.length == 4 并且 words[i].length == 4，所以串联子串的长度必须为 16。
s 中没有子串长度为 16 并且等于 words 的任何顺序排列的连接。
所以我们返回一个空数组。
示例 3：

输入：s = &amp;quot;barfoofoobarthefoobarman&amp;quot;, words = [&amp;quot;bar&amp;quot;,&amp;quot;foo&amp;quot;,&amp;quot;the&amp;quot;]
输出：[6,9,12]
解释：因为 words.length == 3 并且 words[i].length == 3，所以串联子串的长度必须为 9。
子串 &amp;quot;foobarthe&amp;quot; 开始位置是 6。它是 words 中以 [&amp;quot;foo&amp;quot;,&amp;quot;bar&amp;quot;,&amp;quot;the&amp;quot;] 顺序排列的连接。
子串 &amp;quot;barthefoo&amp;quot; 开始位置是 9。它是 words 中以 [&amp;quot;bar&amp;quot;,&amp;quot;the&amp;quot;,&amp;quot;foo&amp;quot;] 顺序排列的连接。
子串 &amp;quot;thefoobar&amp;quot; 开始位置是 12。它是 words 中以 [&amp;quot;the&amp;quot;,&amp;quot;foo&amp;quot;,&amp;quot;bar&amp;quot;] 顺序排列的连接。
 

提示：

1 &amp;lt;= s.length &amp;lt;= 104
1 &amp;lt;= words.length &amp;lt;= 5000
1 &amp;lt;= words[i].length &amp;lt;= 30
words[i] 和 s 由小写英文字母组成
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

// 函数功能：在字符串 s 中查找所有可以由 words 数组中的单词串联形成的子串的起始位置
// 参数说明：
//   s: 输入的字符串
//   words: 字符串数组，存储要匹配的单词
//   wordsSize: words 数组中单词的数量
//   returnSize: 输出参数，存储结果数组的大小
// 返回值：指向存储结果的整数数组的指针
int* findSubstring(char * s, char ** words, int wordsSize, int* returnSize) &amp;#123;
    *returnSize = 0;
    if (wordsSize == 0) return NULL;

    int one_word_len = strlen(words[0]);
    int word_num = wordsSize;
    int all_len = one_word_len * word_num;
    int s_len = strlen(s);

    if (s_len &amp;lt; all_len) return NULL;

    char temp[one_word_len + 1]; // 临时存储截取的子串
    int *local = (int *)malloc(sizeof(int) * s_len); // 存储结果的整数数组
    int flag[wordsSize]; // 标记单词是否被查到
    int i = 0, j, res, k;

    while (i + all_len &amp;lt;= s_len) &amp;#123;
        for (int m = 0; m &amp;lt; wordsSize; m++) flag[m] = 0;

        // 通过滑动窗口的方式截取长度为 wordLen * wordsCount 的子串
        for (j = i; j &amp;lt; i + all_len; j += one_word_len) &amp;#123;
            strncpy(temp, s + j, one_word_len);
            temp[one_word_len] = &#39;\0&#39;; // 注意：将字符数组末尾设置为 &#39;\0&#39;

            res = 0; // 标记该单词在 words 中是否被查到
            for (k = 0; k &amp;lt; wordsSize; k++) &amp;#123;
                if (flag[k] == 1) continue;
                if (strcmp(temp, words[k]) == 0) &amp;#123;
                    flag[k] = 1;
                    res = 1;
                    break;//找到了
                &amp;#125;
            &amp;#125;
-.3
    31
            if (res == 0) break;//没找到
        &amp;#125;

        if (res == 1) &amp;#123;
            local[(*returnSize)++] = i; // 将子串的起始索引保存到结果数组中
        &amp;#125;

        i++;
    &amp;#125;

    return local;
&amp;#125;

int main() &amp;#123;
    char s[] = &amp;quot;barfoothefoobarman&amp;quot;;
    char *words[] = &amp;#123;&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;&amp;#125;;
    int wordsSize = 2;
    int returnSize;
    int *result = findSubstring(s, words, wordsSize, &amp;amp;returnSize);

    printf(&amp;quot;Result: &amp;quot;);
    for (int i = 0; i &amp;lt; returnSize; i++) &amp;#123;
        printf(&amp;quot;%d &amp;quot;, result[i]);
    &amp;#125;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/details&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/3.16/</guid>
            <title>3.16</title>
            <link>https://kagurazakaasahi.github.io/3.16/</link>
            <pubDate>Sat, 16 Mar 2024 05:14:54 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;pre&gt;&lt;code&gt;392. 判断子序列
给定字符串 s 和 t ，判断 s 是否为 t 的子序列。

字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，&amp;quot;ace&amp;quot;是&amp;quot;abcde&amp;quot;的一个子序列，而&amp;quot;aec&amp;quot;不是）。

进阶：

如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k &amp;gt;= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？

致谢：

特别感谢 @pbrother 添加此问题并且创建所有测试用例。

 

示例 1：

输入：s = &amp;quot;abc&amp;quot;, t = &amp;quot;ahbgdc&amp;quot;
输出：true
示例 2：

输入：s = &amp;quot;axc&amp;quot;, t = &amp;quot;ahbgdc&amp;quot;
输出：false
 

提示：

0 &amp;lt;= s.length &amp;lt;= 100
0 &amp;lt;= t.length &amp;lt;= 10^4
两个字符串都只由小写字符组成。
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;很简单，每个字符串各一个指针不断向后移动比较即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool isSubsequence(char* s, char* t) &amp;#123;
    int slen = strlen(s),tlen = strlen(t);
    int si = 0,ti = 0;
    while(si&amp;lt;slen &amp;amp;&amp;amp; ti&amp;lt;tlen)&amp;#123;
        while(ti&amp;lt;=tlen &amp;amp;&amp;amp; s[si] != t[ti])&amp;#123;
            ti++;
        &amp;#125;
        if(ti&amp;lt;tlen)&amp;#123;
            si++;
            ti++;
        &amp;#125;
    &amp;#125;
    if(si == slen)&amp;#123;
        return true;
    &amp;#125;else&amp;#123;
        return false;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但以上代码过于复杂，其实可以直接移动 s,t 的指针最后判断 s 的指针指向的是否为 &#39;/0&#39; 即可&lt;/p&gt;
&lt;p&gt;优化后代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool isSubsequence(char* s, char* t) &amp;#123;
    while (*s &amp;amp;&amp;amp; *t) &amp;#123;
        if (*s == *t) &amp;#123;
            s++; // 字符相等，s后移
        &amp;#125;
        t++; // 每次比较t均后移
    &amp;#125;
    return (*s == &#39;\0&#39;); // 字符串s仅存有结束符，说明s是t的子序列
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很明显的简化了代码&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;209. 长度最小的子数组
给定一个含有 n 个正整数的数组和一个正整数 target 。

找出该数组中满足其总和大于等于 target 的长度最小的 连续
子数组
 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。

 

示例 1：

输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
示例 2：

输入：target = 4, nums = [1,4,4]
输出：1
示例 3：

输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0
 

提示：

1 &amp;lt;= target &amp;lt;= 109
1 &amp;lt;= nums.length &amp;lt;= 105
1 &amp;lt;= nums[i] &amp;lt;= 105
 

进阶：

如果你已经实现 O(n) 时间复杂度的解法, 请尝试设计一个 O(n log(n)) 时间复杂度的解法。
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int min(int a,int b)&amp;#123;
    return a&amp;lt;b?a:b;
&amp;#125;

int minSubArrayLen(int target, int* nums, int numsSize) &amp;#123;
    int left = 0,right = 0;
    int sum = 0;
    int minlen = numsSize + 1;
    while(right &amp;lt; numsSize)&amp;#123;
        sum += nums[right++];
        while(sum &amp;gt;= target)&amp;#123;
            minlen = min(minlen,right-left);
            sum -= nums[left++];
        &amp;#125;
    &amp;#125;
    return minlen&amp;gt;numsSize?0:minlen; 
&amp;#125;
//滑动窗口
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;滑动窗口先增加窗口的 right, 满足条件后增加 left 缩小窗口直至不满足条件，如此只需遍历一次 (将窗口从左滑到右) 即可遍历所有可能情况，时间复杂度为 O (n);&lt;/p&gt;
&lt;p&gt;当然滑动窗口法是该题比较优秀的算法，考虑到通用性，这里还有一种时间复杂度为 O (nlogn) 的算法，具体思路为创建一个前缀和数组 O (n)，然后通过二分查找 (logn) 确定每个前缀和的满足最小条件的另一个前缀和，从中取得最小值即为结果，总时间复杂度即为 O (nlogn). 当然该算法除时间会随数据规模的增大而增大，还需额外的空间及二分的计算，增加了计算与内存的使用，因此不推荐使用。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/3.14/</guid>
            <title>3.14</title>
            <link>https://kagurazakaasahi.github.io/3.14/</link>
            <pubDate>Thu, 14 Mar 2024 07:22:49 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;pre&gt;&lt;code&gt;58. 最后一个单词的长度
给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。

单词 是指仅由字母组成、不包含任何空格字符的最大
子字符串
。

 

示例 1：

输入：s = &amp;quot;Hello World&amp;quot;
输出：5
解释：最后一个单词是“World”，长度为5。
示例 2：

输入：s = &amp;quot;   fly me   to   the moon  &amp;quot;
输出：4
解释：最后一个单词是“moon”，长度为4。
示例 3：

输入：s = &amp;quot;luffy is still joyboy&amp;quot;
输出：6
解释：最后一个单词是长度为6的“joyboy”。
 

提示：

1 &amp;lt;= s.length &amp;lt;= 104
s 仅有英文字母和空格 &#39; &#39; 组成
s 中至少存在一个单词
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;lengthOfLastWord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; now &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;now = %d num = %d s[0] = %c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;now&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;now &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;now&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\nwhile&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;now&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            num&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        now&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\nnum = %d now = %d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;now&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;num = %d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; num&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;从后往前遍历直到第一个空格停止计数即可，注意考虑后面一段全为空格的情况 (忽略计数), 以及 now&amp;lt;0 会导致数组越界，此时根据与或特性，将 &amp;quot;now &amp;gt;= 0&amp;quot; 的条件写在前面即可避免&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;14. 最长公共前缀
编写一个函数来查找字符串数组中的最长公共前缀。

如果不存在公共前缀，返回空字符串 &amp;quot;&amp;quot;。

 

示例 1：

输入：strs = [&amp;quot;flower&amp;quot;,&amp;quot;flow&amp;quot;,&amp;quot;flight&amp;quot;]
输出：&amp;quot;fl&amp;quot;
示例 2：

输入：strs = [&amp;quot;dog&amp;quot;,&amp;quot;racecar&amp;quot;,&amp;quot;car&amp;quot;]
输出：&amp;quot;&amp;quot;
解释：输入不存在公共前缀。
 

提示：

1 &amp;lt;= strs.length &amp;lt;= 200
0 &amp;lt;= strs[i].length &amp;lt;= 200
strs[i] 仅由小写英文字母组成
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;char* longestCommonPrefix(char** strs, int strsSize) &amp;#123;
    // 如果字符串数组为空，直接返回空字符串
    if (strsSize == 0) &amp;#123;
        return &amp;quot;&amp;quot;;
    &amp;#125;
    
    // 计算第一个字符串的长度
    int len = strlen(strs[0]);
    
    // 遍历第一个字符串的每个字符
    for (int i = 0; i &amp;lt; len; i++) &amp;#123;
        // 逐个与其他字符串的相同位置字符比较
        for (int j = 1; j &amp;lt; strsSize; j++) &amp;#123;
            if (strs[j][i] != strs[0][i]) &amp;#123;
                // 如果不匹配，截取前缀并返回
                char* dest = (char*)malloc(i + 1);
                strncpy(dest, strs[0], i);
                dest[i] = &#39;\0&#39;; // 添加字符串结束符
                return dest;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    
    // 如果所有字符串都匹配，返回第一个字符串
    return strs[0];
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述方法为纵向比较，值得注意的是首先进行判空防止无意义的计算，以及在循环函数外将字符串长度计算出来。最后就是复制字符串的方法&lt;/p&gt;
&lt;p&gt;以下还有另一种方法 -- 横向比较法&lt;/p&gt;
&lt;p&gt;将每个字符串与第一个字符串相比较，若不同就将此位置改为 &amp;quot;\0&amp;quot;, 这样输出的字符串遇到第一个 &amp;quot;\0&amp;quot; 就停止，即为最短公共字符串了，具体代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;char* longestCommonPrefix(char** strs, int strsSize) &amp;#123;
    // 如果字符串数组为空，直接返回空字符串
    if (strsSize == 0) &amp;#123;
        return &amp;quot;&amp;quot;;
    &amp;#125;
    
    // 将第一个字符串作为模板
    char* prefix = strs[0];
    
    // 遍历其他字符串
    for (int i = 1; i &amp;lt; strsSize; i++) &amp;#123;
        // 逐个字符比较
        int j = 0;
        while (prefix[j] &amp;amp;&amp;amp; strs[i][j] &amp;amp;&amp;amp; prefix[j] == strs[i][j]) &amp;#123;
            j++;
        &amp;#125;
        // 截取前缀
        prefix[j] = &#39;\0&#39;;
    &amp;#125;
    
    return prefix;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;当比较纵向比较和横向比较这两种方法时，我们可以考虑它们的优势和局限性。

纵向比较：
优势：
简单直接：从第一个字符串开始，逐个字符地与其他字符串的相同位置的字符进行比较。
代码清晰：不需要额外的循环变量，代码结构清晰易懂。
适用性广泛：适用于不同长度的字符串数组。
局限性：
效率较低：如果第一个字符串很长，需要逐个字符地与其他字符串比较，可能会导致不必要的计算。
不适用于空数组：如果输入的字符串数组为空，需要额外处理。
横向比较：
优势：
效率较高：将第一个字符串作为模板，逐个字符地与其他字符串的相同位置的字符进行比较，避免了多次计算字符串长度。
一次遍历：只需要一次遍历其他字符串，而不是逐个字符地比较。
局限性：
需要额外的循环变量：需要一个循环变量来遍历其他字符串。
不适用于不同长度的字符串数组：如果其他字符串的长度不一致，需要额外处理。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/details&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kagurazakaasahi.github.io/3.13/</guid>
            <title>3.13</title>
            <link>https://kagurazakaasahi.github.io/3.13/</link>
            <pubDate>Wed, 13 Mar 2024 13:58:49 +0000</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;pre&gt;&lt;code&gt;42. 接雨水
给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。

 

示例 1：



输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]
输出：6
解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 
示例 2：

输入：height = [4,2,0,3,2,5]
输出：9
 

提示：

n == height.length
1 &amp;lt;= n &amp;lt;= 2 * 104
0 &amp;lt;= height[i] &amp;lt;= 105
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;分析题目易知只需知道每一格左右两侧最大高度即可求出当前格所接雨水，问题就转化为求每一格左右两侧最大高度，暴力算时间复杂度 O (n^2). 如果使用一段空间保存每一格的左右两侧最高值，即可将时间复杂度优化为 O (n) 空间复杂度为 O (n). 再进一步，使用双指针法动态维护每一格左右两侧的最高值，即可将空间复杂度优化为 O (1).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

int trap(int* height, int heightSize) &amp;#123;
    int left = 0, right = heightSize - 1;
    int l_max = 0, r_max = 0;
    int ans = 0;

    while (left &amp;lt;= right) &amp;#123;
        // 更新左侧最高柱子高度
        l_max = (height[left] &amp;gt; l_max) ? height[left] : l_max;
        // 更新右侧最高柱子高度
        r_max = (height[right] &amp;gt; r_max) ? height[right] : r_max;

        // 计算当前柱子上方可以接住的雨水量
        if (l_max &amp;lt; r_max) &amp;#123;
            ans += l_max - height[left];
            left++;
        &amp;#125; else &amp;#123;
            ans += r_max - height[right];
            right--;
        &amp;#125;
    &amp;#125;

    return ans;
&amp;#125;

int main() &amp;#123;
    int height[] = &amp;#123;0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1&amp;#125;;
    int heightSize = sizeof(height) / sizeof(height[0]);

    int result = trap(height, heightSize);
    printf(&amp;quot;可以接住的雨水量：%d\n&amp;quot;, result);

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;13. 罗马数字转整数
罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。

字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。

 

示例 1:

输入: s = &amp;quot;III&amp;quot;
输出: 3
示例 2:

输入: s = &amp;quot;IV&amp;quot;
输出: 4
示例 3:

输入: s = &amp;quot;IX&amp;quot;
输出: 9
示例 4:

输入: s = &amp;quot;LVIII&amp;quot;
输出: 58
解释: L = 50, V= 5, III = 3.
示例 5:

输入: s = &amp;quot;MCMXCIV&amp;quot;
输出: 1994
解释: M = 1000, CM = 900, XC = 90, IV = 4.
 

提示：

1 &amp;lt;= s.length &amp;lt;= 15
s 仅含字符 (&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)
题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内
题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。
IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。
关于罗马数字的详尽书写规则，可以参考 罗马数字 - Mathematics 。
&lt;/code&gt;&lt;/pre&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;题解&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;分析易知只需将字符映射为数字再按照罗马字符规则计算即可得到答案&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

int romanToInt(char * s)&amp;#123;
    int nums[128];
    nums[&#39;I&#39;] = 1;
    nums[&#39;V&#39;] = 5;
    nums[&#39;X&#39;] = 10;
    nums[&#39;L&#39;] = 50;
    nums[&#39;C&#39;] = 100;
    nums[&#39;D&#39;] = 500;
    nums[&#39;M&#39;] = 1000;
    
    int sum = 0;
    while(*s)&amp;#123;
        if(nums[*s] &amp;lt; nums[*(s+1)]) sum -= nums[*s];
        else sum += nums[*s];
        s++;
    &amp;#125;//计算规则
    return sum;
&amp;#125;

int main() &amp;#123;
    char s[] = &amp;quot;MCMXCIV&amp;quot;;
    printf(&amp;quot;%d\n&amp;quot;, romanToInt(s));
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/details&gt;
 ]]></description>
        </item>
    </channel>
</rss>
